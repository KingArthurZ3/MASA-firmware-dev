
firmware-nucleo-tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cc4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002e88  08002e88  00012e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e98  08002e98  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e98  08002e98  00012e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ea0  08002ea0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ea0  08002ea0  00012ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ea4  08002ea4  00012ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ea8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  2000000c  08002eb4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08002eb4  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d92c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b0b  00000000  00000000  0002d968  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bb8  00000000  00000000  0002f478  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ae0  00000000  00000000  00030030  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021b56  00000000  00000000  00030b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000093f0  00000000  00000000  00052666  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cda3b  00000000  00000000  0005ba56  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00129491  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030e0  00000000  00000000  0012950c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002e70 	.word	0x08002e70

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002e70 	.word	0x08002e70

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b0c8      	sub	sp, #288	; 0x120
 8000508:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fc99 	bl	8000e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f853 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f935 	bl	8000780 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000516:	f000 f8e5 	bl	80006e4 <MX_TIM2_Init>
  MX_SPI1_Init();
 800051a:	f000 f8ad 	bl	8000678 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800051e:	4820      	ldr	r0, [pc, #128]	; (80005a0 <main+0x9c>)
 8000520:	f002 f89b 	bl	800265a <HAL_TIM_Base_Start_IT>

  // Initialize ADC dev board
  GPIO_MAX31_Pinfo adc_pins;
  adc_pins.MAX31_CS_PORT[0] 		= SPI_ADC0_CS_GPIO_Port;
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	4a1f      	ldr	r2, [pc, #124]	; (80005a4 <main+0xa0>)
 8000528:	601a      	str	r2, [r3, #0]
  adc_pins.MAX31_EOC_PORT[0]		= SPI_EOC_GPIO_Port;
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	4a1d      	ldr	r2, [pc, #116]	; (80005a4 <main+0xa0>)
 800052e:	621a      	str	r2, [r3, #32]
  adc_pins.MAX31_CNVST_PORT[0]		= SPI_CNVST_GPIO_Port;
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	4a1c      	ldr	r2, [pc, #112]	; (80005a4 <main+0xa0>)
 8000534:	641a      	str	r2, [r3, #64]	; 0x40
  adc_pins.MAX31_CS_ADDR[0] 		= SPI_ADC0_CS_Pin;
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	2210      	movs	r2, #16
 800053a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  adc_pins.MAX31_EOC_ADDR[0]		= SPI_EOC_Pin;
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000544:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  adc_pins.MAX31_CNVST_ADDR[0]		= SPI_CNVST_Pin;
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800054e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
  adc_pins.NUM_ADCS	= 1;
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	2201      	movs	r2, #1
 8000556:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  init_adc(&hspi1, &adc_pins);
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	4619      	mov	r1, r3
 800055e:	4812      	ldr	r0, [pc, #72]	; (80005a8 <main+0xa4>)
 8000560:	f000 fa96 	bl	8000a90 <init_adc>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (read_adc_now) {
 8000564:	4b11      	ldr	r3, [pc, #68]	; (80005ac <main+0xa8>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d0fb      	beq.n	8000564 <main+0x60>
		HAL_GPIO_WritePin(adc0_GPIO_Port, adc0_Pin, GPIO_PIN_SET);
 800056c:	2201      	movs	r2, #1
 800056e:	2110      	movs	r1, #16
 8000570:	480f      	ldr	r0, [pc, #60]	; (80005b0 <main+0xac>)
 8000572:	f000 ffb5 	bl	80014e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(adc1_GPIO_Port, adc1_Pin, GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800057c:	480c      	ldr	r0, [pc, #48]	; (80005b0 <main+0xac>)
 800057e:	f000 ffaf 	bl	80014e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(adc2_GPIO_Port, adc2_Pin, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000588:	4806      	ldr	r0, [pc, #24]	; (80005a4 <main+0xa0>)
 800058a:	f000 ffa9 	bl	80014e0 <HAL_GPIO_WritePin>
		read_adc(&hspi1, 0, adc_values);
 800058e:	4a09      	ldr	r2, [pc, #36]	; (80005b4 <main+0xb0>)
 8000590:	2100      	movs	r1, #0
 8000592:	4805      	ldr	r0, [pc, #20]	; (80005a8 <main+0xa4>)
 8000594:	f000 fadc 	bl	8000b50 <read_adc>
		read_adc_now = 0;
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <main+0xa8>)
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
	if (read_adc_now) {
 800059e:	e7e1      	b.n	8000564 <main+0x60>
 80005a0:	200000a4 	.word	0x200000a4
 80005a4:	40020000 	.word	0x40020000
 80005a8:	2000004c 	.word	0x2000004c
 80005ac:	20000028 	.word	0x20000028
 80005b0:	40020400 	.word	0x40020400
 80005b4:	2000002c 	.word	0x2000002c

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	; 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 031c 	add.w	r3, r7, #28
 80005c2:	2234      	movs	r2, #52	; 0x34
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 fc4a 	bl	8002e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 0308 	add.w	r3, r7, #8
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	4b23      	ldr	r3, [pc, #140]	; (8000670 <SystemClock_Config+0xb8>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	4a22      	ldr	r2, [pc, #136]	; (8000670 <SystemClock_Config+0xb8>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	; 0x40
 80005ec:	4b20      	ldr	r3, [pc, #128]	; (8000670 <SystemClock_Config+0xb8>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005f8:	2300      	movs	r3, #0
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	4b1d      	ldr	r3, [pc, #116]	; (8000674 <SystemClock_Config+0xbc>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000604:	4a1b      	ldr	r2, [pc, #108]	; (8000674 <SystemClock_Config+0xbc>)
 8000606:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b19      	ldr	r3, [pc, #100]	; (8000674 <SystemClock_Config+0xbc>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000614:	603b      	str	r3, [r7, #0]
 8000616:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000618:	2302      	movs	r3, #2
 800061a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000620:	2310      	movs	r3, #16
 8000622:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000624:	2300      	movs	r3, #0
 8000626:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 031c 	add.w	r3, r7, #28
 800062c:	4618      	mov	r0, r3
 800062e:	f001 f9a9 	bl	8001984 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000638:	f000 f910 	bl	800085c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f000 ff5c 	bl	8001514 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000662:	f000 f8fb 	bl	800085c <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3750      	adds	r7, #80	; 0x50
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <MX_SPI1_Init+0x64>)
 800067e:	4a18      	ldr	r2, [pc, #96]	; (80006e0 <MX_SPI1_Init+0x68>)
 8000680:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <MX_SPI1_Init+0x64>)
 8000684:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000688:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MX_SPI1_Init+0x64>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <MX_SPI1_Init+0x64>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_SPI1_Init+0x64>)
 8000698:	2202      	movs	r2, #2
 800069a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_SPI1_Init+0x64>)
 800069e:	2201      	movs	r2, #1
 80006a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_SPI1_Init+0x64>)
 80006a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_SPI1_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <MX_SPI1_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_SPI1_Init+0x64>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <MX_SPI1_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_SPI1_Init+0x64>)
 80006c4:	220a      	movs	r2, #10
 80006c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006c8:	4804      	ldr	r0, [pc, #16]	; (80006dc <MX_SPI1_Init+0x64>)
 80006ca:	f001 fbb5 	bl	8001e38 <HAL_SPI_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006d4:	f000 f8c2 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	2000004c 	.word	0x2000004c
 80006e0:	40013000 	.word	0x40013000

080006e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ea:	f107 0308 	add.w	r3, r7, #8
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f8:	463b      	mov	r3, r7
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000700:	4b1e      	ldr	r3, [pc, #120]	; (800077c <MX_TIM2_Init+0x98>)
 8000702:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000706:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000;
 8000708:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_TIM2_Init+0x98>)
 800070a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800070e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000710:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_TIM2_Init+0x98>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000716:	4b19      	ldr	r3, [pc, #100]	; (800077c <MX_TIM2_Init+0x98>)
 8000718:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800071c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <MX_TIM2_Init+0x98>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000724:	4b15      	ldr	r3, [pc, #84]	; (800077c <MX_TIM2_Init+0x98>)
 8000726:	2200      	movs	r2, #0
 8000728:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800072a:	4814      	ldr	r0, [pc, #80]	; (800077c <MX_TIM2_Init+0x98>)
 800072c:	f001 ff6a 	bl	8002604 <HAL_TIM_Base_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000736:	f000 f891 	bl	800085c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800073a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000740:	f107 0308 	add.w	r3, r7, #8
 8000744:	4619      	mov	r1, r3
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <MX_TIM2_Init+0x98>)
 8000748:	f002 f8b3 	bl	80028b2 <HAL_TIM_ConfigClockSource>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000752:	f000 f883 	bl	800085c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000756:	2300      	movs	r3, #0
 8000758:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4806      	ldr	r0, [pc, #24]	; (800077c <MX_TIM2_Init+0x98>)
 8000764:	f002 fac8 	bl	8002cf8 <HAL_TIMEx_MasterConfigSynchronization>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800076e:	f000 f875 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	3718      	adds	r7, #24
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200000a4 	.word	0x200000a4

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	4b2d      	ldr	r3, [pc, #180]	; (8000850 <MX_GPIO_Init+0xd0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a2c      	ldr	r2, [pc, #176]	; (8000850 <MX_GPIO_Init+0xd0>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b2a      	ldr	r3, [pc, #168]	; (8000850 <MX_GPIO_Init+0xd0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b26      	ldr	r3, [pc, #152]	; (8000850 <MX_GPIO_Init+0xd0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a25      	ldr	r2, [pc, #148]	; (8000850 <MX_GPIO_Init+0xd0>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b23      	ldr	r3, [pc, #140]	; (8000850 <MX_GPIO_Init+0xd0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_ADC0_CS_Pin|SPI_CNVST_Pin, GPIO_PIN_SET);
 80007ce:	2201      	movs	r2, #1
 80007d0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80007d4:	481f      	ldr	r0, [pc, #124]	; (8000854 <MX_GPIO_Init+0xd4>)
 80007d6:	f000 fe83 	bl	80014e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, adc1_Pin|adc0_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80007e0:	481d      	ldr	r0, [pc, #116]	; (8000858 <MX_GPIO_Init+0xd8>)
 80007e2:	f000 fe7d 	bl	80014e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(adc2_GPIO_Port, adc2_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ec:	4819      	ldr	r0, [pc, #100]	; (8000854 <MX_GPIO_Init+0xd4>)
 80007ee:	f000 fe77 	bl	80014e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI_ADC0_CS_Pin adc2_Pin SPI_CNVST_Pin */
  GPIO_InitStruct.Pin = SPI_ADC0_CS_Pin|adc2_Pin|SPI_CNVST_Pin;
 80007f2:	f44f 7344 	mov.w	r3, #784	; 0x310
 80007f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000800:	2302      	movs	r3, #2
 8000802:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	4619      	mov	r1, r3
 800080a:	4812      	ldr	r0, [pc, #72]	; (8000854 <MX_GPIO_Init+0xd4>)
 800080c:	f000 fcbe 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pins : adc1_Pin adc0_Pin */
  GPIO_InitStruct.Pin = adc1_Pin|adc0_Pin;
 8000810:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000814:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800081e:	2302      	movs	r3, #2
 8000820:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	4619      	mov	r1, r3
 8000828:	480b      	ldr	r0, [pc, #44]	; (8000858 <MX_GPIO_Init+0xd8>)
 800082a:	f000 fcaf 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_EOC_Pin */
  GPIO_InitStruct.Pin = SPI_EOC_Pin;
 800082e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000832:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000834:	2300      	movs	r3, #0
 8000836:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPI_EOC_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	4619      	mov	r1, r3
 8000842:	4804      	ldr	r0, [pc, #16]	; (8000854 <MX_GPIO_Init+0xd4>)
 8000844:	f000 fca2 	bl	800118c <HAL_GPIO_Init>

}
 8000848:	bf00      	nop
 800084a:	3720      	adds	r7, #32
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40023800 	.word	0x40023800
 8000854:	40020000 	.word	0x40020000
 8000858:	40020400 	.word	0x40020400

0800085c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
	...

0800086c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <HAL_MspInit+0x4c>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	4a0f      	ldr	r2, [pc, #60]	; (80008b8 <HAL_MspInit+0x4c>)
 800087c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000880:	6453      	str	r3, [r2, #68]	; 0x44
 8000882:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <HAL_MspInit+0x4c>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <HAL_MspInit+0x4c>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	4a08      	ldr	r2, [pc, #32]	; (80008b8 <HAL_MspInit+0x4c>)
 8000898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089c:	6413      	str	r3, [r2, #64]	; 0x40
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <HAL_MspInit+0x4c>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a19      	ldr	r2, [pc, #100]	; (8000940 <HAL_SPI_MspInit+0x84>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d12b      	bne.n	8000936 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <HAL_SPI_MspInit+0x88>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	4a17      	ldr	r2, [pc, #92]	; (8000944 <HAL_SPI_MspInit+0x88>)
 80008e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008ec:	6453      	str	r3, [r2, #68]	; 0x44
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <HAL_SPI_MspInit+0x88>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <HAL_SPI_MspInit+0x88>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a10      	ldr	r2, [pc, #64]	; (8000944 <HAL_SPI_MspInit+0x88>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <HAL_SPI_MspInit+0x88>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000916:	23e0      	movs	r3, #224	; 0xe0
 8000918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000922:	2303      	movs	r3, #3
 8000924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000926:	2305      	movs	r3, #5
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4619      	mov	r1, r3
 8000930:	4805      	ldr	r0, [pc, #20]	; (8000948 <HAL_SPI_MspInit+0x8c>)
 8000932:	f000 fc2b 	bl	800118c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000936:	bf00      	nop
 8000938:	3728      	adds	r7, #40	; 0x28
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40013000 	.word	0x40013000
 8000944:	40023800 	.word	0x40023800
 8000948:	40020000 	.word	0x40020000

0800094c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800095c:	d115      	bne.n	800098a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <HAL_TIM_Base_MspInit+0x48>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	4a0b      	ldr	r2, [pc, #44]	; (8000994 <HAL_TIM_Base_MspInit+0x48>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6413      	str	r3, [r2, #64]	; 0x40
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <HAL_TIM_Base_MspInit+0x48>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2100      	movs	r1, #0
 800097e:	201c      	movs	r0, #28
 8000980:	f000 fbcd 	bl	800111e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000984:	201c      	movs	r0, #28
 8000986:	f000 fbe6 	bl	8001156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800098a:	bf00      	nop
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <HardFault_Handler+0x4>

080009ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <MemManage_Handler+0x4>

080009b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <BusFault_Handler+0x4>

080009b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <UsageFault_Handler+0x4>

080009be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ec:	f000 fa7a 	bl	8000ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009f8:	4803      	ldr	r0, [pc, #12]	; (8000a08 <TIM2_IRQHandler+0x14>)
 80009fa:	f001 fe52 	bl	80026a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  read_adc_now = 1;
 80009fe:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <TIM2_IRQHandler+0x18>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	200000a4 	.word	0x200000a4
 8000a0c:	20000028 	.word	0x20000028

08000a10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a14:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <SystemInit+0x28>)
 8000a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a1a:	4a07      	ldr	r2, [pc, #28]	; (8000a38 <SystemInit+0x28>)
 8000a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a24:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <SystemInit+0x28>)
 8000a26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a2a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a74 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a42:	e003      	b.n	8000a4c <LoopCopyDataInit>

08000a44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a4a:	3104      	adds	r1, #4

08000a4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a4c:	480b      	ldr	r0, [pc, #44]	; (8000a7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a54:	d3f6      	bcc.n	8000a44 <CopyDataInit>
  ldr  r2, =_sbss
 8000a56:	4a0b      	ldr	r2, [pc, #44]	; (8000a84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a58:	e002      	b.n	8000a60 <LoopFillZerobss>

08000a5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a5c:	f842 3b04 	str.w	r3, [r2], #4

08000a60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a64:	d3f9      	bcc.n	8000a5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a66:	f7ff ffd3 	bl	8000a10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a6a:	f002 f9d5 	bl	8002e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a6e:	f7ff fd49 	bl	8000504 <main>
  bx  lr    
 8000a72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a74:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a78:	08002ea8 	.word	0x08002ea8
  ldr  r0, =_sdata
 8000a7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a80:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000a84:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000a88:	200000e8 	.word	0x200000e8

08000a8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a8c:	e7fe      	b.n	8000a8c <ADC_IRQHandler>
	...

08000a90 <init_adc>:
#include "../inc/MAX11131.h"

void init_adc(SPI_HandleTypeDef *SPI_BUS, GPIO_MAX31_Pinfo *pins) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
	 * 		7. Select the right SWCNV bit
	 *
	 *
	 */
	// Configure settings for all ADCs
	uint8_t tx[2] = {0, 0};
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	723b      	strb	r3, [r7, #8]
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	727b      	strb	r3, [r7, #9]
	pinfo = pins;
 8000aa2:	4a2a      	ldr	r2, [pc, #168]	; (8000b4c <init_adc+0xbc>)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	6013      	str	r3, [r2, #0]
	// 	note: these types are taken from the GPIO_TypeDef line 486
	//			in file stm32f446x.h
	uint8_t adcn;

	// Generate adc config data
	uint16_t ADC_CONFIG_REG			= MAX31_CONFIG|SET_MAX31_AVGON;
 8000aa8:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8000aac:	81bb      	strh	r3, [r7, #12]
	uint16_t ADC_MODE_CNTL_REG 		= MAX31_MODE_CNTL|(CUSTOM_INT<<11);
 8000aae:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000ab2:	817b      	strh	r3, [r7, #10]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab4:	b672      	cpsid	i

	__disable_irq();
	for (adcn = 0; adcn < pinfo->NUM_ADCS; ++adcn) {
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	73fb      	strb	r3, [r7, #15]
 8000aba:	e03a      	b.n	8000b32 <init_adc+0xa2>
		configure_read_adc_all(adcn);
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f000 f960 	bl	8000d84 <configure_read_adc_all>
		set_read_adc_range(SPI_BUS, 0);
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f000 f8de 	bl	8000c88 <set_read_adc_range>

		set_adc(adcn, GPIO_PIN_RESET);
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f000 f997 	bl	8000e04 <set_adc>
		package_cmd(ADC_CONFIG_REG, tx);
 8000ad6:	f107 0208 	add.w	r2, r7, #8
 8000ada:	89bb      	ldrh	r3, [r7, #12]
 8000adc:	4611      	mov	r1, r2
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 f978 	bl	8000dd4 <package_cmd>
		if (HAL_SPI_Transmit(SPI_BUS, tx, 2, 1) == HAL_TIMEOUT) {}
 8000ae4:	f107 0108 	add.w	r1, r7, #8
 8000ae8:	2301      	movs	r3, #1
 8000aea:	2202      	movs	r2, #2
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f001 fa07 	bl	8001f00 <HAL_SPI_Transmit>
		//write_adc_reg(SPI_BUS, tx, rx);
		set_adc(adcn, GPIO_PIN_SET);
 8000af2:	7bfb      	ldrb	r3, [r7, #15]
 8000af4:	2101      	movs	r1, #1
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 f984 	bl	8000e04 <set_adc>

		set_adc(adcn, GPIO_PIN_RESET);
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
 8000afe:	2100      	movs	r1, #0
 8000b00:	4618      	mov	r0, r3
 8000b02:	f000 f97f 	bl	8000e04 <set_adc>
		package_cmd(ADC_MODE_CNTL_REG, tx);
 8000b06:	f107 0208 	add.w	r2, r7, #8
 8000b0a:	897b      	ldrh	r3, [r7, #10]
 8000b0c:	4611      	mov	r1, r2
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 f960 	bl	8000dd4 <package_cmd>
		//write_adc_reg(SPI_BUS, tx, rx);
		if (HAL_SPI_Transmit(SPI_BUS, tx, 2, 1) == HAL_TIMEOUT) {}
 8000b14:	f107 0108 	add.w	r1, r7, #8
 8000b18:	2301      	movs	r3, #1
 8000b1a:	2202      	movs	r2, #2
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f001 f9ef 	bl	8001f00 <HAL_SPI_Transmit>
		set_adc(adcn, GPIO_PIN_SET);
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
 8000b24:	2101      	movs	r1, #1
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 f96c 	bl	8000e04 <set_adc>
	for (adcn = 0; adcn < pinfo->NUM_ADCS; ++adcn) {
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	73fb      	strb	r3, [r7, #15]
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <init_adc+0xbc>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8000b3a:	7bfa      	ldrb	r2, [r7, #15]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d3bd      	bcc.n	8000abc <init_adc+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b40:	b662      	cpsie	i

	} // program all adcs with custom int mode set to read all channels
	__enable_irq();
}
 8000b42:	bf00      	nop
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000048 	.word	0x20000048

08000b50 <read_adc>:

void read_adc(SPI_HandleTypeDef *SPI_BUS, uint8_t adcn,
		uint16_t* adc_out) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af02      	add	r7, sp, #8
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	607a      	str	r2, [r7, #4]
 8000b5c:	72fb      	strb	r3, [r7, #11]
	 	 4. Set CS low and High to initiate serial communications
	 		Note: EOC stays low until CS or CNVST is pulled low again
	 */
	/* ADC startup and FIFO register intialization */

	set_adc(adcn, GPIO_PIN_SET);
 8000b5e:	7afb      	ldrb	r3, [r7, #11]
 8000b60:	2101      	movs	r1, #1
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 f94e 	bl	8000e04 <set_adc>
	HAL_GPIO_WritePin(pinfo->MAX31_CNVST_PORT[adcn],
 8000b68:	4b46      	ldr	r3, [pc, #280]	; (8000c84 <read_adc+0x134>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	7afa      	ldrb	r2, [r7, #11]
 8000b6e:	3210      	adds	r2, #16
 8000b70:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
			pinfo->MAX31_CNVST_ADDR[adcn], GPIO_PIN_RESET);
 8000b74:	4b43      	ldr	r3, [pc, #268]	; (8000c84 <read_adc+0x134>)
 8000b76:	681b      	ldr	r3, [r3, #0]
	HAL_GPIO_WritePin(pinfo->MAX31_CNVST_PORT[adcn],
 8000b78:	7afa      	ldrb	r2, [r7, #11]
 8000b7a:	3240      	adds	r2, #64	; 0x40
 8000b7c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000b80:	2200      	movs	r2, #0
 8000b82:	4619      	mov	r1, r3
 8000b84:	f000 fcac 	bl	80014e0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b88:	2001      	movs	r0, #1
 8000b8a:	f000 f9cb 	bl	8000f24 <HAL_Delay>
	HAL_GPIO_WritePin(pinfo->MAX31_CNVST_PORT[adcn],
 8000b8e:	4b3d      	ldr	r3, [pc, #244]	; (8000c84 <read_adc+0x134>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	7afa      	ldrb	r2, [r7, #11]
 8000b94:	3210      	adds	r2, #16
 8000b96:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
				pinfo->MAX31_CNVST_ADDR[adcn], GPIO_PIN_SET);
 8000b9a:	4b3a      	ldr	r3, [pc, #232]	; (8000c84 <read_adc+0x134>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
	HAL_GPIO_WritePin(pinfo->MAX31_CNVST_PORT[adcn],
 8000b9e:	7afa      	ldrb	r2, [r7, #11]
 8000ba0:	3240      	adds	r2, #64	; 0x40
 8000ba2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f000 fc99 	bl	80014e0 <HAL_GPIO_WritePin>

	uint8_t pin_state = HAL_GPIO_ReadPin(pinfo->MAX31_EOC_PORT[adcn],
 8000bae:	4b35      	ldr	r3, [pc, #212]	; (8000c84 <read_adc+0x134>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	7afa      	ldrb	r2, [r7, #11]
 8000bb4:	3208      	adds	r2, #8
 8000bb6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					pinfo->MAX31_EOC_ADDR[adcn]);
 8000bba:	4b32      	ldr	r3, [pc, #200]	; (8000c84 <read_adc+0x134>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
	uint8_t pin_state = HAL_GPIO_ReadPin(pinfo->MAX31_EOC_PORT[adcn],
 8000bbe:	7afa      	ldrb	r2, [r7, #11]
 8000bc0:	3238      	adds	r2, #56	; 0x38
 8000bc2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	f000 fc72 	bl	80014b0 <HAL_GPIO_ReadPin>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	77fb      	strb	r3, [r7, #31]

	while (pin_state != 0) {
 8000bd0:	e010      	b.n	8000bf4 <read_adc+0xa4>
		pin_state = HAL_GPIO_ReadPin(pinfo->MAX31_EOC_PORT[adcn],
 8000bd2:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <read_adc+0x134>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	7afa      	ldrb	r2, [r7, #11]
 8000bd8:	3208      	adds	r2, #8
 8000bda:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
							pinfo->MAX31_EOC_ADDR[adcn]);
 8000bde:	4b29      	ldr	r3, [pc, #164]	; (8000c84 <read_adc+0x134>)
 8000be0:	681b      	ldr	r3, [r3, #0]
		pin_state = HAL_GPIO_ReadPin(pinfo->MAX31_EOC_PORT[adcn],
 8000be2:	7afa      	ldrb	r2, [r7, #11]
 8000be4:	3238      	adds	r2, #56	; 0x38
 8000be6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000bea:	4619      	mov	r1, r3
 8000bec:	f000 fc60 	bl	80014b0 <HAL_GPIO_ReadPin>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	77fb      	strb	r3, [r7, #31]
	while (pin_state != 0) {
 8000bf4:	7ffb      	ldrb	r3, [r7, #31]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d1eb      	bne.n	8000bd2 <read_adc+0x82>
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfa:	b672      	cpsid	i
	/* Serial communications with ADC */
	__disable_irq();

	// The number of bytes in the FIFO is simply the
	// number of channels * 2 (bytes for each channel)
	uint8_t rx[2] = {0};
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	833b      	strh	r3, [r7, #24]
	uint8_t tx[2] = {0};
 8000c00:	2300      	movs	r3, #0
 8000c02:	82bb      	strh	r3, [r7, #20]

	for (uint8_t i = 0; i < pinfo->NUM_CHANNELS[adcn]; ++i) {
 8000c04:	2300      	movs	r3, #0
 8000c06:	77bb      	strb	r3, [r7, #30]
 8000c08:	e02e      	b.n	8000c68 <read_adc+0x118>
		set_adc(adcn, GPIO_PIN_RESET);
 8000c0a:	7afb      	ldrb	r3, [r7, #11]
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 f8f8 	bl	8000e04 <set_adc>
		if (HAL_SPI_TransmitReceive(SPI_BUS, tx, rx, 2, 1) == HAL_TIMEOUT) {}
 8000c14:	f107 0218 	add.w	r2, r7, #24
 8000c18:	f107 0114 	add.w	r1, r7, #20
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	2302      	movs	r3, #2
 8000c22:	68f8      	ldr	r0, [r7, #12]
 8000c24:	f001 faa0 	bl	8002168 <HAL_SPI_TransmitReceive>
		set_adc(adcn, GPIO_PIN_SET);
 8000c28:	7afb      	ldrb	r3, [r7, #11]
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 f8e9 	bl	8000e04 <set_adc>

		uint16_t adc_counts = ((rx[0]<<8)|rx[1]) & 0x0FFF;
 8000c32:	7e3b      	ldrb	r3, [r7, #24]
 8000c34:	021b      	lsls	r3, r3, #8
 8000c36:	b21a      	sxth	r2, r3
 8000c38:	7e7b      	ldrb	r3, [r7, #25]
 8000c3a:	b21b      	sxth	r3, r3
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	b21b      	sxth	r3, r3
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c46:	83bb      	strh	r3, [r7, #28]
		uint16_t channelId = (rx[0] >> 4) & 0x0F;
 8000c48:	7e3b      	ldrb	r3, [r7, #24]
 8000c4a:	091b      	lsrs	r3, r3, #4
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	f003 030f 	and.w	r3, r3, #15
 8000c54:	837b      	strh	r3, [r7, #26]
		adc_out[channelId] = adc_counts;
 8000c56:	8b7b      	ldrh	r3, [r7, #26]
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	8bba      	ldrh	r2, [r7, #28]
 8000c60:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < pinfo->NUM_CHANNELS[adcn]; ++i) {
 8000c62:	7fbb      	ldrb	r3, [r7, #30]
 8000c64:	3301      	adds	r3, #1
 8000c66:	77bb      	strb	r3, [r7, #30]
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <read_adc+0x134>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	7afb      	ldrb	r3, [r7, #11]
 8000c6e:	4413      	add	r3, r2
 8000c70:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8000c74:	7fba      	ldrb	r2, [r7, #30]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d3c7      	bcc.n	8000c0a <read_adc+0xba>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c7a:	b662      	cpsie	i
	}

	__enable_irq();
}
 8000c7c:	bf00      	nop
 8000c7e:	3720      	adds	r7, #32
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000048 	.word	0x20000048

08000c88 <set_read_adc_range>:

void set_read_adc_range(SPI_HandleTypeDef *SPI_BUS, uint8_t adcn) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	70fb      	strb	r3, [r7, #3]
	 5. Set CHSEL[3:0] to Channel Number (Not needed for CUSTOM INT)
	 6. Set SWCNV bit to 1 to enable conversions with chip select
	 */
	uint8_t tx[2];

	uint16_t SET_SCAN_REGISTER_0 = MAX31_CUSTOM_SCAN0;
 8000c94:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000c98:	82fb      	strh	r3, [r7, #22]
	uint16_t SET_SCAN_REGISTER_1 = MAX31_CUSTOM_SCAN1;
 8000c9a:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8000c9e:	82bb      	strh	r3, [r7, #20]
	uint8_t num_channels		= pinfo->NUM_CHANNELS[adcn];
 8000ca0:	4b37      	ldr	r3, [pc, #220]	; (8000d80 <set_read_adc_range+0xf8>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	78fb      	ldrb	r3, [r7, #3]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8000cac:	74bb      	strb	r3, [r7, #18]

	for (uint8_t i = 0; i < num_channels; ++i) {
 8000cae:	2300      	movs	r3, #0
 8000cb0:	74fb      	strb	r3, [r7, #19]
 8000cb2:	e02a      	b.n	8000d0a <set_read_adc_range+0x82>
		uint8_t ch = pinfo->MAX31_CHANNELS[adcn][i];
 8000cb4:	4b32      	ldr	r3, [pc, #200]	; (8000d80 <set_read_adc_range+0xf8>)
 8000cb6:	6819      	ldr	r1, [r3, #0]
 8000cb8:	78fa      	ldrb	r2, [r7, #3]
 8000cba:	7cfb      	ldrb	r3, [r7, #19]
 8000cbc:	0112      	lsls	r2, r2, #4
 8000cbe:	440a      	add	r2, r1
 8000cc0:	4413      	add	r3, r2
 8000cc2:	3399      	adds	r3, #153	; 0x99
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	747b      	strb	r3, [r7, #17]
		if (ch > 7) {
 8000cc8:	7c7b      	ldrb	r3, [r7, #17]
 8000cca:	2b07      	cmp	r3, #7
 8000ccc:	d90d      	bls.n	8000cea <set_read_adc_range+0x62>
			ch -= MAX31_CUSTOM_SCAN0_SUB;
 8000cce:	7c7b      	ldrb	r3, [r7, #17]
 8000cd0:	3b05      	subs	r3, #5
 8000cd2:	747b      	strb	r3, [r7, #17]
			SET_SCAN_REGISTER_0 = SET_SCAN_REGISTER_0 | (1 << ch);
 8000cd4:	7c7b      	ldrb	r3, [r7, #17]
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	b21a      	sxth	r2, r3
 8000cde:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	b21b      	sxth	r3, r3
 8000ce6:	82fb      	strh	r3, [r7, #22]
 8000ce8:	e00c      	b.n	8000d04 <set_read_adc_range+0x7c>
		} else {
			ch += MAX31_CUSTOM_SCAN1_ADD;
 8000cea:	7c7b      	ldrb	r3, [r7, #17]
 8000cec:	3303      	adds	r3, #3
 8000cee:	747b      	strb	r3, [r7, #17]
			SET_SCAN_REGISTER_1 = SET_SCAN_REGISTER_1 | (1 << ch);
 8000cf0:	7c7b      	ldrb	r3, [r7, #17]
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	b21a      	sxth	r2, r3
 8000cfa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	b21b      	sxth	r3, r3
 8000d02:	82bb      	strh	r3, [r7, #20]
	for (uint8_t i = 0; i < num_channels; ++i) {
 8000d04:	7cfb      	ldrb	r3, [r7, #19]
 8000d06:	3301      	adds	r3, #1
 8000d08:	74fb      	strb	r3, [r7, #19]
 8000d0a:	7cfa      	ldrb	r2, [r7, #19]
 8000d0c:	7cbb      	ldrb	r3, [r7, #18]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d3d0      	bcc.n	8000cb4 <set_read_adc_range+0x2c>
  __ASM volatile ("cpsid i" : : : "memory");
 8000d12:	b672      	cpsid	i

	/* Set ADC to custom scan channel range */
	__disable_irq();

	/* Transmit custom channels to send data from */
	set_adc(adcn, GPIO_PIN_RESET);
 8000d14:	78fb      	ldrb	r3, [r7, #3]
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 f873 	bl	8000e04 <set_adc>
	package_cmd(SET_SCAN_REGISTER_0, tx);
 8000d1e:	f107 020c 	add.w	r2, r7, #12
 8000d22:	8afb      	ldrh	r3, [r7, #22]
 8000d24:	4611      	mov	r1, r2
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 f854 	bl	8000dd4 <package_cmd>
	if (HAL_SPI_Transmit(SPI_BUS, tx, 2, 1) == HAL_TIMEOUT) {}
 8000d2c:	f107 010c 	add.w	r1, r7, #12
 8000d30:	2301      	movs	r3, #1
 8000d32:	2202      	movs	r2, #2
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f001 f8e3 	bl	8001f00 <HAL_SPI_Transmit>
	set_adc(adcn, GPIO_PIN_SET);
 8000d3a:	78fb      	ldrb	r3, [r7, #3]
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 f860 	bl	8000e04 <set_adc>

	set_adc(adcn, GPIO_PIN_RESET);
 8000d44:	78fb      	ldrb	r3, [r7, #3]
 8000d46:	2100      	movs	r1, #0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 f85b 	bl	8000e04 <set_adc>
	package_cmd(SET_SCAN_REGISTER_1, tx);
 8000d4e:	f107 020c 	add.w	r2, r7, #12
 8000d52:	8abb      	ldrh	r3, [r7, #20]
 8000d54:	4611      	mov	r1, r2
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 f83c 	bl	8000dd4 <package_cmd>
	if (HAL_SPI_Transmit(SPI_BUS, tx, 2, 1) == HAL_TIMEOUT) {}
 8000d5c:	f107 010c 	add.w	r1, r7, #12
 8000d60:	2301      	movs	r3, #1
 8000d62:	2202      	movs	r2, #2
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f001 f8cb 	bl	8001f00 <HAL_SPI_Transmit>
	set_adc(adcn, GPIO_PIN_SET);
 8000d6a:	78fb      	ldrb	r3, [r7, #3]
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 f848 	bl	8000e04 <set_adc>
  __ASM volatile ("cpsie i" : : : "memory");
 8000d74:	b662      	cpsie	i

	__enable_irq();
}
 8000d76:	bf00      	nop
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000048 	.word	0x20000048

08000d84 <configure_read_adc_all>:

void configure_read_adc_all(uint8_t adcn) {
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
	// Convenience function for reading all channels on adc
	pinfo->NUM_CHANNELS[adcn] = MAX31_MAX_CHANNELS;
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <configure_read_adc_all+0x4c>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	4413      	add	r3, r2
 8000d96:	220e      	movs	r2, #14
 8000d98:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	for (uint8_t i = 0; i < MAX31_MAX_CHANNELS; ++i) {
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	73fb      	strb	r3, [r7, #15]
 8000da0:	e00c      	b.n	8000dbc <configure_read_adc_all+0x38>
		pinfo->MAX31_CHANNELS[adcn][i] = i;
 8000da2:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <configure_read_adc_all+0x4c>)
 8000da4:	6819      	ldr	r1, [r3, #0]
 8000da6:	79fa      	ldrb	r2, [r7, #7]
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	0112      	lsls	r2, r2, #4
 8000dac:	440a      	add	r2, r1
 8000dae:	4413      	add	r3, r2
 8000db0:	3399      	adds	r3, #153	; 0x99
 8000db2:	7bfa      	ldrb	r2, [r7, #15]
 8000db4:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < MAX31_MAX_CHANNELS; ++i) {
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
 8000db8:	3301      	adds	r3, #1
 8000dba:	73fb      	strb	r3, [r7, #15]
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
 8000dbe:	2b0d      	cmp	r3, #13
 8000dc0:	d9ef      	bls.n	8000da2 <configure_read_adc_all+0x1e>
	}
}
 8000dc2:	bf00      	nop
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000048 	.word	0x20000048

08000dd4 <package_cmd>:
void write_adc_reg(SPI_HandleTypeDef *SPI_BUS, uint8_t *tx, uint8_t *rx) {
	if (HAL_SPI_TransmitReceive(SPI_BUS, tx, rx, 2, 1) == HAL_TIMEOUT) {
	}
}

void package_cmd(uint16_t cmd, uint8_t *tx) {
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	80fb      	strh	r3, [r7, #6]
	tx[0] = (cmd >> 8) & 0x00ff;
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	0a1b      	lsrs	r3, r3, #8
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	701a      	strb	r2, [r3, #0]
	tx[1] = (cmd & 0x00ff);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	3301      	adds	r3, #1
 8000df0:	88fa      	ldrh	r2, [r7, #6]
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	701a      	strb	r2, [r3, #0]
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
	...

08000e04 <set_adc>:

void set_adc(uint8_t adcn, GPIO_PinState state) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	460a      	mov	r2, r1
 8000e0e:	71fb      	strb	r3, [r7, #7]
 8000e10:	4613      	mov	r3, r2
 8000e12:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(pinfo->MAX31_CS_PORT[adcn], 
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <set_adc+0x38>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	79fa      	ldrb	r2, [r7, #7]
 8000e1a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
							pinfo->MAX31_CS_ADDR[adcn], state);
 8000e1e:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <set_adc+0x38>)
 8000e20:	681b      	ldr	r3, [r3, #0]
	HAL_GPIO_WritePin(pinfo->MAX31_CS_PORT[adcn], 
 8000e22:	79fa      	ldrb	r2, [r7, #7]
 8000e24:	3230      	adds	r2, #48	; 0x30
 8000e26:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000e2a:	79ba      	ldrb	r2, [r7, #6]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f000 fb57 	bl	80014e0 <HAL_GPIO_WritePin>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000048 	.word	0x20000048

08000e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e44:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0d      	ldr	r2, [pc, #52]	; (8000e80 <HAL_Init+0x40>)
 8000e4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <HAL_Init+0x40>)
 8000e56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a07      	ldr	r2, [pc, #28]	; (8000e80 <HAL_Init+0x40>)
 8000e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e68:	2003      	movs	r0, #3
 8000e6a:	f000 f94d 	bl	8001108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f000 f808 	bl	8000e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e74:	f7ff fcfa 	bl	800086c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023c00 	.word	0x40023c00

08000e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_InitTick+0x54>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_InitTick+0x58>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4619      	mov	r1, r3
 8000e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 f965 	bl	8001172 <HAL_SYSTICK_Config>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e00e      	b.n	8000ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b0f      	cmp	r3, #15
 8000eb6:	d80a      	bhi.n	8000ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ec0:	f000 f92d 	bl	800111e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec4:	4a06      	ldr	r2, [pc, #24]	; (8000ee0 <HAL_InitTick+0x5c>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	e000      	b.n	8000ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	20000008 	.word	0x20000008
 8000ee0:	20000004 	.word	0x20000004

08000ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_IncTick+0x20>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_IncTick+0x24>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <HAL_IncTick+0x24>)
 8000ef6:	6013      	str	r3, [r2, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000008 	.word	0x20000008
 8000f08:	200000e4 	.word	0x200000e4

08000f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <HAL_GetTick+0x14>)
 8000f12:	681b      	ldr	r3, [r3, #0]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	200000e4 	.word	0x200000e4

08000f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f2c:	f7ff ffee 	bl	8000f0c <HAL_GetTick>
 8000f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f3c:	d005      	beq.n	8000f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <HAL_Delay+0x40>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4413      	add	r3, r2
 8000f48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f4a:	bf00      	nop
 8000f4c:	f7ff ffde 	bl	8000f0c <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d8f7      	bhi.n	8000f4c <HAL_Delay+0x28>
  {
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000008 	.word	0x20000008

08000f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <__NVIC_SetPriorityGrouping+0x44>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f84:	4013      	ands	r3, r2
 8000f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9a:	4a04      	ldr	r2, [pc, #16]	; (8000fac <__NVIC_SetPriorityGrouping+0x44>)
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	60d3      	str	r3, [r2, #12]
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	f003 0307 	and.w	r3, r3, #7
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	db0b      	blt.n	8000ff6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	f003 021f 	and.w	r2, r3, #31
 8000fe4:	4907      	ldr	r1, [pc, #28]	; (8001004 <__NVIC_EnableIRQ+0x38>)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	095b      	lsrs	r3, r3, #5
 8000fec:	2001      	movs	r0, #1
 8000fee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000e100 	.word	0xe000e100

08001008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	6039      	str	r1, [r7, #0]
 8001012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	db0a      	blt.n	8001032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	b2da      	uxtb	r2, r3
 8001020:	490c      	ldr	r1, [pc, #48]	; (8001054 <__NVIC_SetPriority+0x4c>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	0112      	lsls	r2, r2, #4
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	440b      	add	r3, r1
 800102c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001030:	e00a      	b.n	8001048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4908      	ldr	r1, [pc, #32]	; (8001058 <__NVIC_SetPriority+0x50>)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	f003 030f 	and.w	r3, r3, #15
 800103e:	3b04      	subs	r3, #4
 8001040:	0112      	lsls	r2, r2, #4
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	440b      	add	r3, r1
 8001046:	761a      	strb	r2, [r3, #24]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000e100 	.word	0xe000e100
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800105c:	b480      	push	{r7}
 800105e:	b089      	sub	sp, #36	; 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f1c3 0307 	rsb	r3, r3, #7
 8001076:	2b04      	cmp	r3, #4
 8001078:	bf28      	it	cs
 800107a:	2304      	movcs	r3, #4
 800107c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3304      	adds	r3, #4
 8001082:	2b06      	cmp	r3, #6
 8001084:	d902      	bls.n	800108c <NVIC_EncodePriority+0x30>
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3b03      	subs	r3, #3
 800108a:	e000      	b.n	800108e <NVIC_EncodePriority+0x32>
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43da      	mvns	r2, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	401a      	ands	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa01 f303 	lsl.w	r3, r1, r3
 80010ae:	43d9      	mvns	r1, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	4313      	orrs	r3, r2
         );
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3724      	adds	r7, #36	; 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d4:	d301      	bcc.n	80010da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00f      	b.n	80010fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010da:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <SysTick_Config+0x40>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e2:	210f      	movs	r1, #15
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010e8:	f7ff ff8e 	bl	8001008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <SysTick_Config+0x40>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f2:	4b04      	ldr	r3, [pc, #16]	; (8001104 <SysTick_Config+0x40>)
 80010f4:	2207      	movs	r2, #7
 80010f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	e000e010 	.word	0xe000e010

08001108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ff29 	bl	8000f68 <__NVIC_SetPriorityGrouping>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111e:	b580      	push	{r7, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001130:	f7ff ff3e 	bl	8000fb0 <__NVIC_GetPriorityGrouping>
 8001134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	68b9      	ldr	r1, [r7, #8]
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f7ff ff8e 	bl	800105c <NVIC_EncodePriority>
 8001140:	4602      	mov	r2, r0
 8001142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff5d 	bl	8001008 <__NVIC_SetPriority>
}
 800114e:	bf00      	nop
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff31 	bl	8000fcc <__NVIC_EnableIRQ>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ffa2 	bl	80010c4 <SysTick_Config>
 8001180:	4603      	mov	r3, r0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800118c:	b480      	push	{r7}
 800118e:	b089      	sub	sp, #36	; 0x24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
 80011a6:	e165      	b.n	8001474 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011a8:	2201      	movs	r2, #1
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	f040 8154 	bne.w	800146e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d00b      	beq.n	80011e6 <HAL_GPIO_Init+0x5a>
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d007      	beq.n	80011e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011da:	2b11      	cmp	r3, #17
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2b12      	cmp	r3, #18
 80011e4:	d130      	bne.n	8001248 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	2203      	movs	r2, #3
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	68da      	ldr	r2, [r3, #12]
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800121c:	2201      	movs	r2, #1
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	091b      	lsrs	r3, r3, #4
 8001232:	f003 0201 	and.w	r2, r3, #1
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0xfc>
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b12      	cmp	r3, #18
 8001286:	d123      	bne.n	80012d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	08da      	lsrs	r2, r3, #3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3208      	adds	r2, #8
 8001290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	220f      	movs	r2, #15
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	691a      	ldr	r2, [r3, #16]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	08da      	lsrs	r2, r3, #3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3208      	adds	r2, #8
 80012ca:	69b9      	ldr	r1, [r7, #24]
 80012cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	2203      	movs	r2, #3
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0203 	and.w	r2, r3, #3
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 80ae 	beq.w	800146e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b5c      	ldr	r3, [pc, #368]	; (8001488 <HAL_GPIO_Init+0x2fc>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	4a5b      	ldr	r2, [pc, #364]	; (8001488 <HAL_GPIO_Init+0x2fc>)
 800131c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001320:	6453      	str	r3, [r2, #68]	; 0x44
 8001322:	4b59      	ldr	r3, [pc, #356]	; (8001488 <HAL_GPIO_Init+0x2fc>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800132e:	4a57      	ldr	r2, [pc, #348]	; (800148c <HAL_GPIO_Init+0x300>)
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	3302      	adds	r3, #2
 8001336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	220f      	movs	r2, #15
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a4e      	ldr	r2, [pc, #312]	; (8001490 <HAL_GPIO_Init+0x304>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d025      	beq.n	80013a6 <HAL_GPIO_Init+0x21a>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a4d      	ldr	r2, [pc, #308]	; (8001494 <HAL_GPIO_Init+0x308>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d01f      	beq.n	80013a2 <HAL_GPIO_Init+0x216>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4c      	ldr	r2, [pc, #304]	; (8001498 <HAL_GPIO_Init+0x30c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d019      	beq.n	800139e <HAL_GPIO_Init+0x212>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a4b      	ldr	r2, [pc, #300]	; (800149c <HAL_GPIO_Init+0x310>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d013      	beq.n	800139a <HAL_GPIO_Init+0x20e>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4a      	ldr	r2, [pc, #296]	; (80014a0 <HAL_GPIO_Init+0x314>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d00d      	beq.n	8001396 <HAL_GPIO_Init+0x20a>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a49      	ldr	r2, [pc, #292]	; (80014a4 <HAL_GPIO_Init+0x318>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d007      	beq.n	8001392 <HAL_GPIO_Init+0x206>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a48      	ldr	r2, [pc, #288]	; (80014a8 <HAL_GPIO_Init+0x31c>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d101      	bne.n	800138e <HAL_GPIO_Init+0x202>
 800138a:	2306      	movs	r3, #6
 800138c:	e00c      	b.n	80013a8 <HAL_GPIO_Init+0x21c>
 800138e:	2307      	movs	r3, #7
 8001390:	e00a      	b.n	80013a8 <HAL_GPIO_Init+0x21c>
 8001392:	2305      	movs	r3, #5
 8001394:	e008      	b.n	80013a8 <HAL_GPIO_Init+0x21c>
 8001396:	2304      	movs	r3, #4
 8001398:	e006      	b.n	80013a8 <HAL_GPIO_Init+0x21c>
 800139a:	2303      	movs	r3, #3
 800139c:	e004      	b.n	80013a8 <HAL_GPIO_Init+0x21c>
 800139e:	2302      	movs	r3, #2
 80013a0:	e002      	b.n	80013a8 <HAL_GPIO_Init+0x21c>
 80013a2:	2301      	movs	r3, #1
 80013a4:	e000      	b.n	80013a8 <HAL_GPIO_Init+0x21c>
 80013a6:	2300      	movs	r3, #0
 80013a8:	69fa      	ldr	r2, [r7, #28]
 80013aa:	f002 0203 	and.w	r2, r2, #3
 80013ae:	0092      	lsls	r2, r2, #2
 80013b0:	4093      	lsls	r3, r2
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013b8:	4934      	ldr	r1, [pc, #208]	; (800148c <HAL_GPIO_Init+0x300>)
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	089b      	lsrs	r3, r3, #2
 80013be:	3302      	adds	r3, #2
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013c6:	4b39      	ldr	r3, [pc, #228]	; (80014ac <HAL_GPIO_Init+0x320>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4013      	ands	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ea:	4a30      	ldr	r2, [pc, #192]	; (80014ac <HAL_GPIO_Init+0x320>)
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013f0:	4b2e      	ldr	r3, [pc, #184]	; (80014ac <HAL_GPIO_Init+0x320>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001414:	4a25      	ldr	r2, [pc, #148]	; (80014ac <HAL_GPIO_Init+0x320>)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800141a:	4b24      	ldr	r3, [pc, #144]	; (80014ac <HAL_GPIO_Init+0x320>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800143e:	4a1b      	ldr	r2, [pc, #108]	; (80014ac <HAL_GPIO_Init+0x320>)
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001444:	4b19      	ldr	r3, [pc, #100]	; (80014ac <HAL_GPIO_Init+0x320>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001468:	4a10      	ldr	r2, [pc, #64]	; (80014ac <HAL_GPIO_Init+0x320>)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3301      	adds	r3, #1
 8001472:	61fb      	str	r3, [r7, #28]
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	2b0f      	cmp	r3, #15
 8001478:	f67f ae96 	bls.w	80011a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800147c:	bf00      	nop
 800147e:	3724      	adds	r7, #36	; 0x24
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	40023800 	.word	0x40023800
 800148c:	40013800 	.word	0x40013800
 8001490:	40020000 	.word	0x40020000
 8001494:	40020400 	.word	0x40020400
 8001498:	40020800 	.word	0x40020800
 800149c:	40020c00 	.word	0x40020c00
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40021400 	.word	0x40021400
 80014a8:	40021800 	.word	0x40021800
 80014ac:	40013c00 	.word	0x40013c00

080014b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	691a      	ldr	r2, [r3, #16]
 80014c0:	887b      	ldrh	r3, [r7, #2]
 80014c2:	4013      	ands	r3, r2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d002      	beq.n	80014ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014c8:	2301      	movs	r3, #1
 80014ca:	73fb      	strb	r3, [r7, #15]
 80014cc:	e001      	b.n	80014d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014ce:	2300      	movs	r3, #0
 80014d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	807b      	strh	r3, [r7, #2]
 80014ec:	4613      	mov	r3, r2
 80014ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014f0:	787b      	ldrb	r3, [r7, #1]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014f6:	887a      	ldrh	r2, [r7, #2]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014fc:	e003      	b.n	8001506 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014fe:	887b      	ldrh	r3, [r7, #2]
 8001500:	041a      	lsls	r2, r3, #16
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	619a      	str	r2, [r3, #24]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
	...

08001514 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e0cc      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001528:	4b68      	ldr	r3, [pc, #416]	; (80016cc <HAL_RCC_ClockConfig+0x1b8>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 030f 	and.w	r3, r3, #15
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	429a      	cmp	r2, r3
 8001534:	d90c      	bls.n	8001550 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001536:	4b65      	ldr	r3, [pc, #404]	; (80016cc <HAL_RCC_ClockConfig+0x1b8>)
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800153e:	4b63      	ldr	r3, [pc, #396]	; (80016cc <HAL_RCC_ClockConfig+0x1b8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	d001      	beq.n	8001550 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e0b8      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d020      	beq.n	800159e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	2b00      	cmp	r3, #0
 8001566:	d005      	beq.n	8001574 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001568:	4b59      	ldr	r3, [pc, #356]	; (80016d0 <HAL_RCC_ClockConfig+0x1bc>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	4a58      	ldr	r2, [pc, #352]	; (80016d0 <HAL_RCC_ClockConfig+0x1bc>)
 800156e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001572:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0308 	and.w	r3, r3, #8
 800157c:	2b00      	cmp	r3, #0
 800157e:	d005      	beq.n	800158c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001580:	4b53      	ldr	r3, [pc, #332]	; (80016d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	4a52      	ldr	r2, [pc, #328]	; (80016d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001586:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800158a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800158c:	4b50      	ldr	r3, [pc, #320]	; (80016d0 <HAL_RCC_ClockConfig+0x1bc>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	494d      	ldr	r1, [pc, #308]	; (80016d0 <HAL_RCC_ClockConfig+0x1bc>)
 800159a:	4313      	orrs	r3, r2
 800159c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d044      	beq.n	8001634 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d107      	bne.n	80015c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b2:	4b47      	ldr	r3, [pc, #284]	; (80016d0 <HAL_RCC_ClockConfig+0x1bc>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d119      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e07f      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d003      	beq.n	80015d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	d107      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015d2:	4b3f      	ldr	r3, [pc, #252]	; (80016d0 <HAL_RCC_ClockConfig+0x1bc>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d109      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e06f      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e2:	4b3b      	ldr	r3, [pc, #236]	; (80016d0 <HAL_RCC_ClockConfig+0x1bc>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e067      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015f2:	4b37      	ldr	r3, [pc, #220]	; (80016d0 <HAL_RCC_ClockConfig+0x1bc>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f023 0203 	bic.w	r2, r3, #3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	4934      	ldr	r1, [pc, #208]	; (80016d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001600:	4313      	orrs	r3, r2
 8001602:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001604:	f7ff fc82 	bl	8000f0c <HAL_GetTick>
 8001608:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800160a:	e00a      	b.n	8001622 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800160c:	f7ff fc7e 	bl	8000f0c <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	f241 3288 	movw	r2, #5000	; 0x1388
 800161a:	4293      	cmp	r3, r2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e04f      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001622:	4b2b      	ldr	r3, [pc, #172]	; (80016d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 020c 	and.w	r2, r3, #12
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	429a      	cmp	r2, r3
 8001632:	d1eb      	bne.n	800160c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001634:	4b25      	ldr	r3, [pc, #148]	; (80016cc <HAL_RCC_ClockConfig+0x1b8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 030f 	and.w	r3, r3, #15
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	429a      	cmp	r2, r3
 8001640:	d20c      	bcs.n	800165c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001642:	4b22      	ldr	r3, [pc, #136]	; (80016cc <HAL_RCC_ClockConfig+0x1b8>)
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800164a:	4b20      	ldr	r3, [pc, #128]	; (80016cc <HAL_RCC_ClockConfig+0x1b8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	429a      	cmp	r2, r3
 8001656:	d001      	beq.n	800165c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e032      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	d008      	beq.n	800167a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001668:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	4916      	ldr	r1, [pc, #88]	; (80016d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	4313      	orrs	r3, r2
 8001678:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	2b00      	cmp	r3, #0
 8001684:	d009      	beq.n	800169a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001686:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	490e      	ldr	r1, [pc, #56]	; (80016d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001696:	4313      	orrs	r3, r2
 8001698:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800169a:	f000 f821 	bl	80016e0 <HAL_RCC_GetSysClockFreq>
 800169e:	4601      	mov	r1, r0
 80016a0:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	091b      	lsrs	r3, r3, #4
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 80016ac:	5cd3      	ldrb	r3, [r2, r3]
 80016ae:	fa21 f303 	lsr.w	r3, r1, r3
 80016b2:	4a09      	ldr	r2, [pc, #36]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80016b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <HAL_RCC_ClockConfig+0x1c8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fbe2 	bl	8000e84 <HAL_InitTick>

  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40023c00 	.word	0x40023c00
 80016d0:	40023800 	.word	0x40023800
 80016d4:	08002e88 	.word	0x08002e88
 80016d8:	20000000 	.word	0x20000000
 80016dc:	20000004 	.word	0x20000004

080016e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016fa:	4b9f      	ldr	r3, [pc, #636]	; (8001978 <HAL_RCC_GetSysClockFreq+0x298>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 030c 	and.w	r3, r3, #12
 8001702:	2b0c      	cmp	r3, #12
 8001704:	f200 8130 	bhi.w	8001968 <HAL_RCC_GetSysClockFreq+0x288>
 8001708:	a201      	add	r2, pc, #4	; (adr r2, 8001710 <HAL_RCC_GetSysClockFreq+0x30>)
 800170a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800170e:	bf00      	nop
 8001710:	08001745 	.word	0x08001745
 8001714:	08001969 	.word	0x08001969
 8001718:	08001969 	.word	0x08001969
 800171c:	08001969 	.word	0x08001969
 8001720:	0800174b 	.word	0x0800174b
 8001724:	08001969 	.word	0x08001969
 8001728:	08001969 	.word	0x08001969
 800172c:	08001969 	.word	0x08001969
 8001730:	08001751 	.word	0x08001751
 8001734:	08001969 	.word	0x08001969
 8001738:	08001969 	.word	0x08001969
 800173c:	08001969 	.word	0x08001969
 8001740:	0800185f 	.word	0x0800185f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001744:	4b8d      	ldr	r3, [pc, #564]	; (800197c <HAL_RCC_GetSysClockFreq+0x29c>)
 8001746:	613b      	str	r3, [r7, #16]
       break;
 8001748:	e111      	b.n	800196e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800174a:	4b8d      	ldr	r3, [pc, #564]	; (8001980 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800174c:	613b      	str	r3, [r7, #16]
      break;
 800174e:	e10e      	b.n	800196e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001750:	4b89      	ldr	r3, [pc, #548]	; (8001978 <HAL_RCC_GetSysClockFreq+0x298>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001758:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800175a:	4b87      	ldr	r3, [pc, #540]	; (8001978 <HAL_RCC_GetSysClockFreq+0x298>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d023      	beq.n	80017ae <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001766:	4b84      	ldr	r3, [pc, #528]	; (8001978 <HAL_RCC_GetSysClockFreq+0x298>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	099b      	lsrs	r3, r3, #6
 800176c:	f04f 0400 	mov.w	r4, #0
 8001770:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	ea03 0501 	and.w	r5, r3, r1
 800177c:	ea04 0602 	and.w	r6, r4, r2
 8001780:	4a7f      	ldr	r2, [pc, #508]	; (8001980 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001782:	fb02 f106 	mul.w	r1, r2, r6
 8001786:	2200      	movs	r2, #0
 8001788:	fb02 f205 	mul.w	r2, r2, r5
 800178c:	440a      	add	r2, r1
 800178e:	497c      	ldr	r1, [pc, #496]	; (8001980 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001790:	fba5 0101 	umull	r0, r1, r5, r1
 8001794:	1853      	adds	r3, r2, r1
 8001796:	4619      	mov	r1, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f04f 0400 	mov.w	r4, #0
 800179e:	461a      	mov	r2, r3
 80017a0:	4623      	mov	r3, r4
 80017a2:	f7fe fd2f 	bl	8000204 <__aeabi_uldivmod>
 80017a6:	4603      	mov	r3, r0
 80017a8:	460c      	mov	r4, r1
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	e049      	b.n	8001842 <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ae:	4b72      	ldr	r3, [pc, #456]	; (8001978 <HAL_RCC_GetSysClockFreq+0x298>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	099b      	lsrs	r3, r3, #6
 80017b4:	f04f 0400 	mov.w	r4, #0
 80017b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	ea03 0501 	and.w	r5, r3, r1
 80017c4:	ea04 0602 	and.w	r6, r4, r2
 80017c8:	4629      	mov	r1, r5
 80017ca:	4632      	mov	r2, r6
 80017cc:	f04f 0300 	mov.w	r3, #0
 80017d0:	f04f 0400 	mov.w	r4, #0
 80017d4:	0154      	lsls	r4, r2, #5
 80017d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80017da:	014b      	lsls	r3, r1, #5
 80017dc:	4619      	mov	r1, r3
 80017de:	4622      	mov	r2, r4
 80017e0:	1b49      	subs	r1, r1, r5
 80017e2:	eb62 0206 	sbc.w	r2, r2, r6
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	f04f 0400 	mov.w	r4, #0
 80017ee:	0194      	lsls	r4, r2, #6
 80017f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80017f4:	018b      	lsls	r3, r1, #6
 80017f6:	1a5b      	subs	r3, r3, r1
 80017f8:	eb64 0402 	sbc.w	r4, r4, r2
 80017fc:	f04f 0100 	mov.w	r1, #0
 8001800:	f04f 0200 	mov.w	r2, #0
 8001804:	00e2      	lsls	r2, r4, #3
 8001806:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800180a:	00d9      	lsls	r1, r3, #3
 800180c:	460b      	mov	r3, r1
 800180e:	4614      	mov	r4, r2
 8001810:	195b      	adds	r3, r3, r5
 8001812:	eb44 0406 	adc.w	r4, r4, r6
 8001816:	f04f 0100 	mov.w	r1, #0
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	02a2      	lsls	r2, r4, #10
 8001820:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001824:	0299      	lsls	r1, r3, #10
 8001826:	460b      	mov	r3, r1
 8001828:	4614      	mov	r4, r2
 800182a:	4618      	mov	r0, r3
 800182c:	4621      	mov	r1, r4
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f04f 0400 	mov.w	r4, #0
 8001834:	461a      	mov	r2, r3
 8001836:	4623      	mov	r3, r4
 8001838:	f7fe fce4 	bl	8000204 <__aeabi_uldivmod>
 800183c:	4603      	mov	r3, r0
 800183e:	460c      	mov	r4, r1
 8001840:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001842:	4b4d      	ldr	r3, [pc, #308]	; (8001978 <HAL_RCC_GetSysClockFreq+0x298>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	0c1b      	lsrs	r3, r3, #16
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	3301      	adds	r3, #1
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	613b      	str	r3, [r7, #16]
      break;
 800185c:	e087      	b.n	800196e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800185e:	4b46      	ldr	r3, [pc, #280]	; (8001978 <HAL_RCC_GetSysClockFreq+0x298>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001866:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001868:	4b43      	ldr	r3, [pc, #268]	; (8001978 <HAL_RCC_GetSysClockFreq+0x298>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d023      	beq.n	80018bc <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001874:	4b40      	ldr	r3, [pc, #256]	; (8001978 <HAL_RCC_GetSysClockFreq+0x298>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	099b      	lsrs	r3, r3, #6
 800187a:	f04f 0400 	mov.w	r4, #0
 800187e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	ea03 0501 	and.w	r5, r3, r1
 800188a:	ea04 0602 	and.w	r6, r4, r2
 800188e:	4a3c      	ldr	r2, [pc, #240]	; (8001980 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001890:	fb02 f106 	mul.w	r1, r2, r6
 8001894:	2200      	movs	r2, #0
 8001896:	fb02 f205 	mul.w	r2, r2, r5
 800189a:	440a      	add	r2, r1
 800189c:	4938      	ldr	r1, [pc, #224]	; (8001980 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800189e:	fba5 0101 	umull	r0, r1, r5, r1
 80018a2:	1853      	adds	r3, r2, r1
 80018a4:	4619      	mov	r1, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f04f 0400 	mov.w	r4, #0
 80018ac:	461a      	mov	r2, r3
 80018ae:	4623      	mov	r3, r4
 80018b0:	f7fe fca8 	bl	8000204 <__aeabi_uldivmod>
 80018b4:	4603      	mov	r3, r0
 80018b6:	460c      	mov	r4, r1
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	e049      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018bc:	4b2e      	ldr	r3, [pc, #184]	; (8001978 <HAL_RCC_GetSysClockFreq+0x298>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	099b      	lsrs	r3, r3, #6
 80018c2:	f04f 0400 	mov.w	r4, #0
 80018c6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	ea03 0501 	and.w	r5, r3, r1
 80018d2:	ea04 0602 	and.w	r6, r4, r2
 80018d6:	4629      	mov	r1, r5
 80018d8:	4632      	mov	r2, r6
 80018da:	f04f 0300 	mov.w	r3, #0
 80018de:	f04f 0400 	mov.w	r4, #0
 80018e2:	0154      	lsls	r4, r2, #5
 80018e4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018e8:	014b      	lsls	r3, r1, #5
 80018ea:	4619      	mov	r1, r3
 80018ec:	4622      	mov	r2, r4
 80018ee:	1b49      	subs	r1, r1, r5
 80018f0:	eb62 0206 	sbc.w	r2, r2, r6
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	f04f 0400 	mov.w	r4, #0
 80018fc:	0194      	lsls	r4, r2, #6
 80018fe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001902:	018b      	lsls	r3, r1, #6
 8001904:	1a5b      	subs	r3, r3, r1
 8001906:	eb64 0402 	sbc.w	r4, r4, r2
 800190a:	f04f 0100 	mov.w	r1, #0
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	00e2      	lsls	r2, r4, #3
 8001914:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001918:	00d9      	lsls	r1, r3, #3
 800191a:	460b      	mov	r3, r1
 800191c:	4614      	mov	r4, r2
 800191e:	195b      	adds	r3, r3, r5
 8001920:	eb44 0406 	adc.w	r4, r4, r6
 8001924:	f04f 0100 	mov.w	r1, #0
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	02a2      	lsls	r2, r4, #10
 800192e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001932:	0299      	lsls	r1, r3, #10
 8001934:	460b      	mov	r3, r1
 8001936:	4614      	mov	r4, r2
 8001938:	4618      	mov	r0, r3
 800193a:	4621      	mov	r1, r4
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f04f 0400 	mov.w	r4, #0
 8001942:	461a      	mov	r2, r3
 8001944:	4623      	mov	r3, r4
 8001946:	f7fe fc5d 	bl	8000204 <__aeabi_uldivmod>
 800194a:	4603      	mov	r3, r0
 800194c:	460c      	mov	r4, r1
 800194e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001950:	4b09      	ldr	r3, [pc, #36]	; (8001978 <HAL_RCC_GetSysClockFreq+0x298>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	0f1b      	lsrs	r3, r3, #28
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	fbb2 f3f3 	udiv	r3, r2, r3
 8001964:	613b      	str	r3, [r7, #16]
      break;
 8001966:	e002      	b.n	800196e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001968:	4b04      	ldr	r3, [pc, #16]	; (800197c <HAL_RCC_GetSysClockFreq+0x29c>)
 800196a:	613b      	str	r3, [r7, #16]
      break;
 800196c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800196e:	693b      	ldr	r3, [r7, #16]
}
 8001970:	4618      	mov	r0, r3
 8001972:	371c      	adds	r7, #28
 8001974:	46bd      	mov	sp, r7
 8001976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001978:	40023800 	.word	0x40023800
 800197c:	00f42400 	.word	0x00f42400
 8001980:	017d7840 	.word	0x017d7840

08001984 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 8083 	beq.w	8001aa4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800199e:	4b95      	ldr	r3, [pc, #596]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d019      	beq.n	80019de <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019aa:	4b92      	ldr	r3, [pc, #584]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d106      	bne.n	80019c4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019b6:	4b8f      	ldr	r3, [pc, #572]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019c2:	d00c      	beq.n	80019de <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019c4:	4b8b      	ldr	r3, [pc, #556]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019cc:	2b0c      	cmp	r3, #12
 80019ce:	d112      	bne.n	80019f6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019d0:	4b88      	ldr	r3, [pc, #544]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019dc:	d10b      	bne.n	80019f6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019de:	4b85      	ldr	r3, [pc, #532]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d05b      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x11e>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d157      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e216      	b.n	8001e24 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019fe:	d106      	bne.n	8001a0e <HAL_RCC_OscConfig+0x8a>
 8001a00:	4b7c      	ldr	r3, [pc, #496]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a7b      	ldr	r2, [pc, #492]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	e01d      	b.n	8001a4a <HAL_RCC_OscConfig+0xc6>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a16:	d10c      	bne.n	8001a32 <HAL_RCC_OscConfig+0xae>
 8001a18:	4b76      	ldr	r3, [pc, #472]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a75      	ldr	r2, [pc, #468]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001a1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	4b73      	ldr	r3, [pc, #460]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a72      	ldr	r2, [pc, #456]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	e00b      	b.n	8001a4a <HAL_RCC_OscConfig+0xc6>
 8001a32:	4b70      	ldr	r3, [pc, #448]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a6f      	ldr	r2, [pc, #444]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001a38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	4b6d      	ldr	r3, [pc, #436]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a6c      	ldr	r2, [pc, #432]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001a44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a48:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d013      	beq.n	8001a7a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a52:	f7ff fa5b 	bl	8000f0c <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a5a:	f7ff fa57 	bl	8000f0c <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b64      	cmp	r3, #100	; 0x64
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e1db      	b.n	8001e24 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6c:	4b61      	ldr	r3, [pc, #388]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0f0      	beq.n	8001a5a <HAL_RCC_OscConfig+0xd6>
 8001a78:	e014      	b.n	8001aa4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7a:	f7ff fa47 	bl	8000f0c <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a82:	f7ff fa43 	bl	8000f0c <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b64      	cmp	r3, #100	; 0x64
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e1c7      	b.n	8001e24 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a94:	4b57      	ldr	r3, [pc, #348]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1f0      	bne.n	8001a82 <HAL_RCC_OscConfig+0xfe>
 8001aa0:	e000      	b.n	8001aa4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d06f      	beq.n	8001b90 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ab0:	4b50      	ldr	r3, [pc, #320]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 030c 	and.w	r3, r3, #12
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d017      	beq.n	8001aec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001abc:	4b4d      	ldr	r3, [pc, #308]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	d105      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ac8:	4b4a      	ldr	r3, [pc, #296]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d00b      	beq.n	8001aec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ad4:	4b47      	ldr	r3, [pc, #284]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001adc:	2b0c      	cmp	r3, #12
 8001ade:	d11c      	bne.n	8001b1a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ae0:	4b44      	ldr	r3, [pc, #272]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d116      	bne.n	8001b1a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aec:	4b41      	ldr	r3, [pc, #260]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <HAL_RCC_OscConfig+0x180>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d001      	beq.n	8001b04 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e18f      	b.n	8001e24 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b04:	4b3b      	ldr	r3, [pc, #236]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	4938      	ldr	r1, [pc, #224]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b18:	e03a      	b.n	8001b90 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d020      	beq.n	8001b64 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b22:	4b35      	ldr	r3, [pc, #212]	; (8001bf8 <HAL_RCC_OscConfig+0x274>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b28:	f7ff f9f0 	bl	8000f0c <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b30:	f7ff f9ec 	bl	8000f0c <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e170      	b.n	8001e24 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b42:	4b2c      	ldr	r3, [pc, #176]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0f0      	beq.n	8001b30 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4e:	4b29      	ldr	r3, [pc, #164]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	4925      	ldr	r1, [pc, #148]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	600b      	str	r3, [r1, #0]
 8001b62:	e015      	b.n	8001b90 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b64:	4b24      	ldr	r3, [pc, #144]	; (8001bf8 <HAL_RCC_OscConfig+0x274>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6a:	f7ff f9cf 	bl	8000f0c <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b72:	f7ff f9cb 	bl	8000f0c <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e14f      	b.n	8001e24 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b84:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1f0      	bne.n	8001b72 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0308 	and.w	r3, r3, #8
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d037      	beq.n	8001c0c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d016      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ba4:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <HAL_RCC_OscConfig+0x278>)
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001baa:	f7ff f9af 	bl	8000f0c <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bb2:	f7ff f9ab 	bl	8000f0c <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e12f      	b.n	8001e24 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0f0      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x22e>
 8001bd0:	e01c      	b.n	8001c0c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <HAL_RCC_OscConfig+0x278>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd8:	f7ff f998 	bl	8000f0c <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bde:	e00f      	b.n	8001c00 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001be0:	f7ff f994 	bl	8000f0c <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d908      	bls.n	8001c00 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e118      	b.n	8001e24 <HAL_RCC_OscConfig+0x4a0>
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	42470000 	.word	0x42470000
 8001bfc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c00:	4b8a      	ldr	r3, [pc, #552]	; (8001e2c <HAL_RCC_OscConfig+0x4a8>)
 8001c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1e9      	bne.n	8001be0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 8097 	beq.w	8001d48 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c1e:	4b83      	ldr	r3, [pc, #524]	; (8001e2c <HAL_RCC_OscConfig+0x4a8>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10f      	bne.n	8001c4a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	4b7f      	ldr	r3, [pc, #508]	; (8001e2c <HAL_RCC_OscConfig+0x4a8>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	4a7e      	ldr	r2, [pc, #504]	; (8001e2c <HAL_RCC_OscConfig+0x4a8>)
 8001c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c38:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3a:	4b7c      	ldr	r3, [pc, #496]	; (8001e2c <HAL_RCC_OscConfig+0x4a8>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c46:	2301      	movs	r3, #1
 8001c48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4a:	4b79      	ldr	r3, [pc, #484]	; (8001e30 <HAL_RCC_OscConfig+0x4ac>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d118      	bne.n	8001c88 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c56:	4b76      	ldr	r3, [pc, #472]	; (8001e30 <HAL_RCC_OscConfig+0x4ac>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a75      	ldr	r2, [pc, #468]	; (8001e30 <HAL_RCC_OscConfig+0x4ac>)
 8001c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c62:	f7ff f953 	bl	8000f0c <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c6a:	f7ff f94f 	bl	8000f0c <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e0d3      	b.n	8001e24 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7c:	4b6c      	ldr	r3, [pc, #432]	; (8001e30 <HAL_RCC_OscConfig+0x4ac>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d106      	bne.n	8001c9e <HAL_RCC_OscConfig+0x31a>
 8001c90:	4b66      	ldr	r3, [pc, #408]	; (8001e2c <HAL_RCC_OscConfig+0x4a8>)
 8001c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c94:	4a65      	ldr	r2, [pc, #404]	; (8001e2c <HAL_RCC_OscConfig+0x4a8>)
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c9c:	e01c      	b.n	8001cd8 <HAL_RCC_OscConfig+0x354>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	2b05      	cmp	r3, #5
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x33c>
 8001ca6:	4b61      	ldr	r3, [pc, #388]	; (8001e2c <HAL_RCC_OscConfig+0x4a8>)
 8001ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001caa:	4a60      	ldr	r2, [pc, #384]	; (8001e2c <HAL_RCC_OscConfig+0x4a8>)
 8001cac:	f043 0304 	orr.w	r3, r3, #4
 8001cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb2:	4b5e      	ldr	r3, [pc, #376]	; (8001e2c <HAL_RCC_OscConfig+0x4a8>)
 8001cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb6:	4a5d      	ldr	r2, [pc, #372]	; (8001e2c <HAL_RCC_OscConfig+0x4a8>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8001cbe:	e00b      	b.n	8001cd8 <HAL_RCC_OscConfig+0x354>
 8001cc0:	4b5a      	ldr	r3, [pc, #360]	; (8001e2c <HAL_RCC_OscConfig+0x4a8>)
 8001cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc4:	4a59      	ldr	r2, [pc, #356]	; (8001e2c <HAL_RCC_OscConfig+0x4a8>)
 8001cc6:	f023 0301 	bic.w	r3, r3, #1
 8001cca:	6713      	str	r3, [r2, #112]	; 0x70
 8001ccc:	4b57      	ldr	r3, [pc, #348]	; (8001e2c <HAL_RCC_OscConfig+0x4a8>)
 8001cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd0:	4a56      	ldr	r2, [pc, #344]	; (8001e2c <HAL_RCC_OscConfig+0x4a8>)
 8001cd2:	f023 0304 	bic.w	r3, r3, #4
 8001cd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d015      	beq.n	8001d0c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce0:	f7ff f914 	bl	8000f0c <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce6:	e00a      	b.n	8001cfe <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce8:	f7ff f910 	bl	8000f0c <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e092      	b.n	8001e24 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cfe:	4b4b      	ldr	r3, [pc, #300]	; (8001e2c <HAL_RCC_OscConfig+0x4a8>)
 8001d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0ee      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x364>
 8001d0a:	e014      	b.n	8001d36 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0c:	f7ff f8fe 	bl	8000f0c <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d12:	e00a      	b.n	8001d2a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d14:	f7ff f8fa 	bl	8000f0c <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e07c      	b.n	8001e24 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d2a:	4b40      	ldr	r3, [pc, #256]	; (8001e2c <HAL_RCC_OscConfig+0x4a8>)
 8001d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1ee      	bne.n	8001d14 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d36:	7dfb      	ldrb	r3, [r7, #23]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d105      	bne.n	8001d48 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d3c:	4b3b      	ldr	r3, [pc, #236]	; (8001e2c <HAL_RCC_OscConfig+0x4a8>)
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	4a3a      	ldr	r2, [pc, #232]	; (8001e2c <HAL_RCC_OscConfig+0x4a8>)
 8001d42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d068      	beq.n	8001e22 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d50:	4b36      	ldr	r3, [pc, #216]	; (8001e2c <HAL_RCC_OscConfig+0x4a8>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 030c 	and.w	r3, r3, #12
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d060      	beq.n	8001e1e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d145      	bne.n	8001df0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d64:	4b33      	ldr	r3, [pc, #204]	; (8001e34 <HAL_RCC_OscConfig+0x4b0>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6a:	f7ff f8cf 	bl	8000f0c <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d72:	f7ff f8cb 	bl	8000f0c <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e04f      	b.n	8001e24 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d84:	4b29      	ldr	r3, [pc, #164]	; (8001e2c <HAL_RCC_OscConfig+0x4a8>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1f0      	bne.n	8001d72 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69da      	ldr	r2, [r3, #28]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9e:	019b      	lsls	r3, r3, #6
 8001da0:	431a      	orrs	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da6:	085b      	lsrs	r3, r3, #1
 8001da8:	3b01      	subs	r3, #1
 8001daa:	041b      	lsls	r3, r3, #16
 8001dac:	431a      	orrs	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db2:	061b      	lsls	r3, r3, #24
 8001db4:	431a      	orrs	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	071b      	lsls	r3, r3, #28
 8001dbc:	491b      	ldr	r1, [pc, #108]	; (8001e2c <HAL_RCC_OscConfig+0x4a8>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	; (8001e34 <HAL_RCC_OscConfig+0x4b0>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc8:	f7ff f8a0 	bl	8000f0c <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd0:	f7ff f89c 	bl	8000f0c <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e020      	b.n	8001e24 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de2:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <HAL_RCC_OscConfig+0x4a8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f0      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x44c>
 8001dee:	e018      	b.n	8001e22 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df0:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <HAL_RCC_OscConfig+0x4b0>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df6:	f7ff f889 	bl	8000f0c <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dfe:	f7ff f885 	bl	8000f0c <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e009      	b.n	8001e24 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_RCC_OscConfig+0x4a8>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1f0      	bne.n	8001dfe <HAL_RCC_OscConfig+0x47a>
 8001e1c:	e001      	b.n	8001e22 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40007000 	.word	0x40007000
 8001e34:	42470060 	.word	0x42470060

08001e38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e056      	b.n	8001ef8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d106      	bne.n	8001e6a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7fe fd29 	bl	80008bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e80:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	431a      	orrs	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69db      	ldr	r3, [r3, #28]
 8001eac:	431a      	orrs	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
 8001eb2:	ea42 0103 	orr.w	r1, r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	0c1b      	lsrs	r3, r3, #16
 8001ec8:	f003 0104 	and.w	r1, r3, #4
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	69da      	ldr	r2, [r3, #28]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ee6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b088      	sub	sp, #32
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	603b      	str	r3, [r7, #0]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d101      	bne.n	8001f22 <HAL_SPI_Transmit+0x22>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e11e      	b.n	8002160 <HAL_SPI_Transmit+0x260>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f2a:	f7fe ffef 	bl	8000f0c <HAL_GetTick>
 8001f2e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001f30:	88fb      	ldrh	r3, [r7, #6]
 8001f32:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d002      	beq.n	8001f46 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001f40:	2302      	movs	r3, #2
 8001f42:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f44:	e103      	b.n	800214e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d002      	beq.n	8001f52 <HAL_SPI_Transmit+0x52>
 8001f4c:	88fb      	ldrh	r3, [r7, #6]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d102      	bne.n	8001f58 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f56:	e0fa      	b.n	800214e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	68ba      	ldr	r2, [r7, #8]
 8001f6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	88fa      	ldrh	r2, [r7, #6]
 8001f70:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	88fa      	ldrh	r2, [r7, #6]
 8001f76:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f9e:	d107      	bne.n	8001fb0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fba:	2b40      	cmp	r3, #64	; 0x40
 8001fbc:	d007      	beq.n	8001fce <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fcc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fd6:	d14b      	bne.n	8002070 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d002      	beq.n	8001fe6 <HAL_SPI_Transmit+0xe6>
 8001fe0:	8afb      	ldrh	r3, [r7, #22]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d13e      	bne.n	8002064 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	881a      	ldrh	r2, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	1c9a      	adds	r2, r3, #2
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002000:	b29b      	uxth	r3, r3
 8002002:	3b01      	subs	r3, #1
 8002004:	b29a      	uxth	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800200a:	e02b      	b.n	8002064 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b02      	cmp	r3, #2
 8002018:	d112      	bne.n	8002040 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	881a      	ldrh	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	1c9a      	adds	r2, r3, #2
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002034:	b29b      	uxth	r3, r3
 8002036:	3b01      	subs	r3, #1
 8002038:	b29a      	uxth	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	86da      	strh	r2, [r3, #54]	; 0x36
 800203e:	e011      	b.n	8002064 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002040:	f7fe ff64 	bl	8000f0c <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d803      	bhi.n	8002058 <HAL_SPI_Transmit+0x158>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002056:	d102      	bne.n	800205e <HAL_SPI_Transmit+0x15e>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d102      	bne.n	8002064 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002062:	e074      	b.n	800214e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002068:	b29b      	uxth	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1ce      	bne.n	800200c <HAL_SPI_Transmit+0x10c>
 800206e:	e04c      	b.n	800210a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d002      	beq.n	800207e <HAL_SPI_Transmit+0x17e>
 8002078:	8afb      	ldrh	r3, [r7, #22]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d140      	bne.n	8002100 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	330c      	adds	r3, #12
 8002088:	7812      	ldrb	r2, [r2, #0]
 800208a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800209a:	b29b      	uxth	r3, r3
 800209c:	3b01      	subs	r3, #1
 800209e:	b29a      	uxth	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80020a4:	e02c      	b.n	8002100 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d113      	bne.n	80020dc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	330c      	adds	r3, #12
 80020be:	7812      	ldrb	r2, [r2, #0]
 80020c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	1c5a      	adds	r2, r3, #1
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	3b01      	subs	r3, #1
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80020da:	e011      	b.n	8002100 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020dc:	f7fe ff16 	bl	8000f0c <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d803      	bhi.n	80020f4 <HAL_SPI_Transmit+0x1f4>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020f2:	d102      	bne.n	80020fa <HAL_SPI_Transmit+0x1fa>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d102      	bne.n	8002100 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80020fe:	e026      	b.n	800214e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002104:	b29b      	uxth	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1cd      	bne.n	80020a6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	6839      	ldr	r1, [r7, #0]
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 fa36 	bl	8002580 <SPI_EndRxTxTransaction>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d002      	beq.n	8002120 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2220      	movs	r2, #32
 800211e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d10a      	bne.n	800213e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002128:	2300      	movs	r3, #0
 800212a:	613b      	str	r3, [r7, #16]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002142:	2b00      	cmp	r3, #0
 8002144:	d002      	beq.n	800214c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	77fb      	strb	r3, [r7, #31]
 800214a:	e000      	b.n	800214e <HAL_SPI_Transmit+0x24e>
  }

error:
 800214c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800215e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3720      	adds	r7, #32
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08c      	sub	sp, #48	; 0x30
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
 8002174:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002176:	2301      	movs	r3, #1
 8002178:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800217a:	2300      	movs	r3, #0
 800217c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002186:	2b01      	cmp	r3, #1
 8002188:	d101      	bne.n	800218e <HAL_SPI_TransmitReceive+0x26>
 800218a:	2302      	movs	r3, #2
 800218c:	e18a      	b.n	80024a4 <HAL_SPI_TransmitReceive+0x33c>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002196:	f7fe feb9 	bl	8000f0c <HAL_GetTick>
 800219a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80021ac:	887b      	ldrh	r3, [r7, #2]
 80021ae:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80021b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d00f      	beq.n	80021d8 <HAL_SPI_TransmitReceive+0x70>
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021be:	d107      	bne.n	80021d0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d103      	bne.n	80021d0 <HAL_SPI_TransmitReceive+0x68>
 80021c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d003      	beq.n	80021d8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80021d0:	2302      	movs	r3, #2
 80021d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80021d6:	e15b      	b.n	8002490 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d005      	beq.n	80021ea <HAL_SPI_TransmitReceive+0x82>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d002      	beq.n	80021ea <HAL_SPI_TransmitReceive+0x82>
 80021e4:	887b      	ldrh	r3, [r7, #2]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d103      	bne.n	80021f2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80021f0:	e14e      	b.n	8002490 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d003      	beq.n	8002206 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2205      	movs	r2, #5
 8002202:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	887a      	ldrh	r2, [r7, #2]
 8002216:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	887a      	ldrh	r2, [r7, #2]
 800221c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	68ba      	ldr	r2, [r7, #8]
 8002222:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	887a      	ldrh	r2, [r7, #2]
 8002228:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	887a      	ldrh	r2, [r7, #2]
 800222e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002246:	2b40      	cmp	r3, #64	; 0x40
 8002248:	d007      	beq.n	800225a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002258:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002262:	d178      	bne.n	8002356 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d002      	beq.n	8002272 <HAL_SPI_TransmitReceive+0x10a>
 800226c:	8b7b      	ldrh	r3, [r7, #26]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d166      	bne.n	8002340 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	881a      	ldrh	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	1c9a      	adds	r2, r3, #2
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800228c:	b29b      	uxth	r3, r3
 800228e:	3b01      	subs	r3, #1
 8002290:	b29a      	uxth	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002296:	e053      	b.n	8002340 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d11b      	bne.n	80022de <HAL_SPI_TransmitReceive+0x176>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d016      	beq.n	80022de <HAL_SPI_TransmitReceive+0x176>
 80022b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d113      	bne.n	80022de <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	881a      	ldrh	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	1c9a      	adds	r2, r3, #2
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80022da:	2300      	movs	r3, #0
 80022dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d119      	bne.n	8002320 <HAL_SPI_TransmitReceive+0x1b8>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d014      	beq.n	8002320 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002300:	b292      	uxth	r2, r2
 8002302:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002308:	1c9a      	adds	r2, r3, #2
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002312:	b29b      	uxth	r3, r3
 8002314:	3b01      	subs	r3, #1
 8002316:	b29a      	uxth	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800231c:	2301      	movs	r3, #1
 800231e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002320:	f7fe fdf4 	bl	8000f0c <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800232c:	429a      	cmp	r2, r3
 800232e:	d807      	bhi.n	8002340 <HAL_SPI_TransmitReceive+0x1d8>
 8002330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002332:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002336:	d003      	beq.n	8002340 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800233e:	e0a7      	b.n	8002490 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002344:	b29b      	uxth	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1a6      	bne.n	8002298 <HAL_SPI_TransmitReceive+0x130>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800234e:	b29b      	uxth	r3, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1a1      	bne.n	8002298 <HAL_SPI_TransmitReceive+0x130>
 8002354:	e07c      	b.n	8002450 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d002      	beq.n	8002364 <HAL_SPI_TransmitReceive+0x1fc>
 800235e:	8b7b      	ldrh	r3, [r7, #26]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d16b      	bne.n	800243c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	330c      	adds	r3, #12
 800236e:	7812      	ldrb	r2, [r2, #0]
 8002370:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002380:	b29b      	uxth	r3, r3
 8002382:	3b01      	subs	r3, #1
 8002384:	b29a      	uxth	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800238a:	e057      	b.n	800243c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b02      	cmp	r3, #2
 8002398:	d11c      	bne.n	80023d4 <HAL_SPI_TransmitReceive+0x26c>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800239e:	b29b      	uxth	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d017      	beq.n	80023d4 <HAL_SPI_TransmitReceive+0x26c>
 80023a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d114      	bne.n	80023d4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	330c      	adds	r3, #12
 80023b4:	7812      	ldrb	r2, [r2, #0]
 80023b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	3b01      	subs	r3, #1
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d119      	bne.n	8002416 <HAL_SPI_TransmitReceive+0x2ae>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d014      	beq.n	8002416 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fe:	1c5a      	adds	r2, r3, #1
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002408:	b29b      	uxth	r3, r3
 800240a:	3b01      	subs	r3, #1
 800240c:	b29a      	uxth	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002412:	2301      	movs	r3, #1
 8002414:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002416:	f7fe fd79 	bl	8000f0c <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002422:	429a      	cmp	r2, r3
 8002424:	d803      	bhi.n	800242e <HAL_SPI_TransmitReceive+0x2c6>
 8002426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002428:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800242c:	d102      	bne.n	8002434 <HAL_SPI_TransmitReceive+0x2cc>
 800242e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002430:	2b00      	cmp	r3, #0
 8002432:	d103      	bne.n	800243c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800243a:	e029      	b.n	8002490 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002440:	b29b      	uxth	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1a2      	bne.n	800238c <HAL_SPI_TransmitReceive+0x224>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800244a:	b29b      	uxth	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	d19d      	bne.n	800238c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002452:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f000 f893 	bl	8002580 <SPI_EndRxTxTransaction>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d006      	beq.n	800246e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2220      	movs	r2, #32
 800246a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800246c:	e010      	b.n	8002490 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10b      	bne.n	800248e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	e000      	b.n	8002490 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800248e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80024a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3730      	adds	r7, #48	; 0x30
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	603b      	str	r3, [r7, #0]
 80024b8:	4613      	mov	r3, r2
 80024ba:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024bc:	e04c      	b.n	8002558 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024c4:	d048      	beq.n	8002558 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80024c6:	f7fe fd21 	bl	8000f0c <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d902      	bls.n	80024dc <SPI_WaitFlagStateUntilTimeout+0x30>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d13d      	bne.n	8002558 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80024ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024f4:	d111      	bne.n	800251a <SPI_WaitFlagStateUntilTimeout+0x6e>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024fe:	d004      	beq.n	800250a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002508:	d107      	bne.n	800251a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002518:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002522:	d10f      	bne.n	8002544 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002542:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e00f      	b.n	8002578 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	4013      	ands	r3, r2
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	429a      	cmp	r2, r3
 8002566:	bf0c      	ite	eq
 8002568:	2301      	moveq	r3, #1
 800256a:	2300      	movne	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	461a      	mov	r2, r3
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	429a      	cmp	r2, r3
 8002574:	d1a3      	bne.n	80024be <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b088      	sub	sp, #32
 8002584:	af02      	add	r7, sp, #8
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800258c:	4b1b      	ldr	r3, [pc, #108]	; (80025fc <SPI_EndRxTxTransaction+0x7c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a1b      	ldr	r2, [pc, #108]	; (8002600 <SPI_EndRxTxTransaction+0x80>)
 8002592:	fba2 2303 	umull	r2, r3, r2, r3
 8002596:	0d5b      	lsrs	r3, r3, #21
 8002598:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800259c:	fb02 f303 	mul.w	r3, r2, r3
 80025a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025aa:	d112      	bne.n	80025d2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2200      	movs	r2, #0
 80025b4:	2180      	movs	r1, #128	; 0x80
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f7ff ff78 	bl	80024ac <SPI_WaitFlagStateUntilTimeout>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d016      	beq.n	80025f0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c6:	f043 0220 	orr.w	r2, r3, #32
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e00f      	b.n	80025f2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00a      	beq.n	80025ee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	3b01      	subs	r3, #1
 80025dc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e8:	2b80      	cmp	r3, #128	; 0x80
 80025ea:	d0f2      	beq.n	80025d2 <SPI_EndRxTxTransaction+0x52>
 80025ec:	e000      	b.n	80025f0 <SPI_EndRxTxTransaction+0x70>
        break;
 80025ee:	bf00      	nop
  }

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000000 	.word	0x20000000
 8002600:	165e9f81 	.word	0x165e9f81

08002604 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e01d      	b.n	8002652 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d106      	bne.n	8002630 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7fe f98e 	bl	800094c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2202      	movs	r2, #2
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3304      	adds	r3, #4
 8002640:	4619      	mov	r1, r3
 8002642:	4610      	mov	r0, r2
 8002644:	f000 fa1e 	bl	8002a84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800265a:	b480      	push	{r7}
 800265c:	b085      	sub	sp, #20
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f042 0201 	orr.w	r2, r2, #1
 8002670:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b06      	cmp	r3, #6
 8002682:	d007      	beq.n	8002694 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0201 	orr.w	r2, r2, #1
 8002692:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d122      	bne.n	80026fe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d11b      	bne.n	80026fe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f06f 0202 	mvn.w	r2, #2
 80026ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	f003 0303 	and.w	r3, r3, #3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 f9af 	bl	8002a48 <HAL_TIM_IC_CaptureCallback>
 80026ea:	e005      	b.n	80026f8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f9a1 	bl	8002a34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f9b2 	bl	8002a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b04      	cmp	r3, #4
 800270a:	d122      	bne.n	8002752 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	2b04      	cmp	r3, #4
 8002718:	d11b      	bne.n	8002752 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f06f 0204 	mvn.w	r2, #4
 8002722:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2202      	movs	r2, #2
 8002728:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 f985 	bl	8002a48 <HAL_TIM_IC_CaptureCallback>
 800273e:	e005      	b.n	800274c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 f977 	bl	8002a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f988 	bl	8002a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	f003 0308 	and.w	r3, r3, #8
 800275c:	2b08      	cmp	r3, #8
 800275e:	d122      	bne.n	80027a6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b08      	cmp	r3, #8
 800276c:	d11b      	bne.n	80027a6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f06f 0208 	mvn.w	r2, #8
 8002776:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2204      	movs	r2, #4
 800277c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f95b 	bl	8002a48 <HAL_TIM_IC_CaptureCallback>
 8002792:	e005      	b.n	80027a0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f94d 	bl	8002a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f95e 	bl	8002a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	f003 0310 	and.w	r3, r3, #16
 80027b0:	2b10      	cmp	r3, #16
 80027b2:	d122      	bne.n	80027fa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f003 0310 	and.w	r3, r3, #16
 80027be:	2b10      	cmp	r3, #16
 80027c0:	d11b      	bne.n	80027fa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f06f 0210 	mvn.w	r2, #16
 80027ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2208      	movs	r2, #8
 80027d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f931 	bl	8002a48 <HAL_TIM_IC_CaptureCallback>
 80027e6:	e005      	b.n	80027f4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f923 	bl	8002a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f934 	bl	8002a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b01      	cmp	r3, #1
 8002806:	d10e      	bne.n	8002826 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b01      	cmp	r3, #1
 8002814:	d107      	bne.n	8002826 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f06f 0201 	mvn.w	r2, #1
 800281e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 f8fd 	bl	8002a20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002830:	2b80      	cmp	r3, #128	; 0x80
 8002832:	d10e      	bne.n	8002852 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283e:	2b80      	cmp	r3, #128	; 0x80
 8002840:	d107      	bne.n	8002852 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800284a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 fad9 	bl	8002e04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285c:	2b40      	cmp	r3, #64	; 0x40
 800285e:	d10e      	bne.n	800287e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286a:	2b40      	cmp	r3, #64	; 0x40
 800286c:	d107      	bne.n	800287e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 f8f9 	bl	8002a70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	f003 0320 	and.w	r3, r3, #32
 8002888:	2b20      	cmp	r3, #32
 800288a:	d10e      	bne.n	80028aa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f003 0320 	and.w	r3, r3, #32
 8002896:	2b20      	cmp	r3, #32
 8002898:	d107      	bne.n	80028aa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f06f 0220 	mvn.w	r2, #32
 80028a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 faa3 	bl	8002df0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028aa:	bf00      	nop
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b084      	sub	sp, #16
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_TIM_ConfigClockSource+0x18>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e0a6      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x166>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2202      	movs	r2, #2
 80028d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028e8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028f0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b40      	cmp	r3, #64	; 0x40
 8002900:	d067      	beq.n	80029d2 <HAL_TIM_ConfigClockSource+0x120>
 8002902:	2b40      	cmp	r3, #64	; 0x40
 8002904:	d80b      	bhi.n	800291e <HAL_TIM_ConfigClockSource+0x6c>
 8002906:	2b10      	cmp	r3, #16
 8002908:	d073      	beq.n	80029f2 <HAL_TIM_ConfigClockSource+0x140>
 800290a:	2b10      	cmp	r3, #16
 800290c:	d802      	bhi.n	8002914 <HAL_TIM_ConfigClockSource+0x62>
 800290e:	2b00      	cmp	r3, #0
 8002910:	d06f      	beq.n	80029f2 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002912:	e078      	b.n	8002a06 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002914:	2b20      	cmp	r3, #32
 8002916:	d06c      	beq.n	80029f2 <HAL_TIM_ConfigClockSource+0x140>
 8002918:	2b30      	cmp	r3, #48	; 0x30
 800291a:	d06a      	beq.n	80029f2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800291c:	e073      	b.n	8002a06 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800291e:	2b70      	cmp	r3, #112	; 0x70
 8002920:	d00d      	beq.n	800293e <HAL_TIM_ConfigClockSource+0x8c>
 8002922:	2b70      	cmp	r3, #112	; 0x70
 8002924:	d804      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x7e>
 8002926:	2b50      	cmp	r3, #80	; 0x50
 8002928:	d033      	beq.n	8002992 <HAL_TIM_ConfigClockSource+0xe0>
 800292a:	2b60      	cmp	r3, #96	; 0x60
 800292c:	d041      	beq.n	80029b2 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800292e:	e06a      	b.n	8002a06 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002934:	d066      	beq.n	8002a04 <HAL_TIM_ConfigClockSource+0x152>
 8002936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800293a:	d017      	beq.n	800296c <HAL_TIM_ConfigClockSource+0xba>
      break;
 800293c:	e063      	b.n	8002a06 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	6899      	ldr	r1, [r3, #8]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f000 f9b3 	bl	8002cb8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002960:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	609a      	str	r2, [r3, #8]
      break;
 800296a:	e04c      	b.n	8002a06 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6818      	ldr	r0, [r3, #0]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	6899      	ldr	r1, [r3, #8]
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f000 f99c 	bl	8002cb8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800298e:	609a      	str	r2, [r3, #8]
      break;
 8002990:	e039      	b.n	8002a06 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6818      	ldr	r0, [r3, #0]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	6859      	ldr	r1, [r3, #4]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	461a      	mov	r2, r3
 80029a0:	f000 f910 	bl	8002bc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2150      	movs	r1, #80	; 0x50
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 f969 	bl	8002c82 <TIM_ITRx_SetConfig>
      break;
 80029b0:	e029      	b.n	8002a06 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6818      	ldr	r0, [r3, #0]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	6859      	ldr	r1, [r3, #4]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	461a      	mov	r2, r3
 80029c0:	f000 f92f 	bl	8002c22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2160      	movs	r1, #96	; 0x60
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 f959 	bl	8002c82 <TIM_ITRx_SetConfig>
      break;
 80029d0:	e019      	b.n	8002a06 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6818      	ldr	r0, [r3, #0]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	6859      	ldr	r1, [r3, #4]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	461a      	mov	r2, r3
 80029e0:	f000 f8f0 	bl	8002bc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2140      	movs	r1, #64	; 0x40
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 f949 	bl	8002c82 <TIM_ITRx_SetConfig>
      break;
 80029f0:	e009      	b.n	8002a06 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4619      	mov	r1, r3
 80029fc:	4610      	mov	r0, r2
 80029fe:	f000 f940 	bl	8002c82 <TIM_ITRx_SetConfig>
      break;
 8002a02:	e000      	b.n	8002a06 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002a04:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a40      	ldr	r2, [pc, #256]	; (8002b98 <TIM_Base_SetConfig+0x114>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d013      	beq.n	8002ac4 <TIM_Base_SetConfig+0x40>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa2:	d00f      	beq.n	8002ac4 <TIM_Base_SetConfig+0x40>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a3d      	ldr	r2, [pc, #244]	; (8002b9c <TIM_Base_SetConfig+0x118>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d00b      	beq.n	8002ac4 <TIM_Base_SetConfig+0x40>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a3c      	ldr	r2, [pc, #240]	; (8002ba0 <TIM_Base_SetConfig+0x11c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d007      	beq.n	8002ac4 <TIM_Base_SetConfig+0x40>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a3b      	ldr	r2, [pc, #236]	; (8002ba4 <TIM_Base_SetConfig+0x120>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d003      	beq.n	8002ac4 <TIM_Base_SetConfig+0x40>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a3a      	ldr	r2, [pc, #232]	; (8002ba8 <TIM_Base_SetConfig+0x124>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d108      	bne.n	8002ad6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a2f      	ldr	r2, [pc, #188]	; (8002b98 <TIM_Base_SetConfig+0x114>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d02b      	beq.n	8002b36 <TIM_Base_SetConfig+0xb2>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae4:	d027      	beq.n	8002b36 <TIM_Base_SetConfig+0xb2>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a2c      	ldr	r2, [pc, #176]	; (8002b9c <TIM_Base_SetConfig+0x118>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d023      	beq.n	8002b36 <TIM_Base_SetConfig+0xb2>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a2b      	ldr	r2, [pc, #172]	; (8002ba0 <TIM_Base_SetConfig+0x11c>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d01f      	beq.n	8002b36 <TIM_Base_SetConfig+0xb2>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a2a      	ldr	r2, [pc, #168]	; (8002ba4 <TIM_Base_SetConfig+0x120>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d01b      	beq.n	8002b36 <TIM_Base_SetConfig+0xb2>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a29      	ldr	r2, [pc, #164]	; (8002ba8 <TIM_Base_SetConfig+0x124>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d017      	beq.n	8002b36 <TIM_Base_SetConfig+0xb2>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a28      	ldr	r2, [pc, #160]	; (8002bac <TIM_Base_SetConfig+0x128>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d013      	beq.n	8002b36 <TIM_Base_SetConfig+0xb2>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a27      	ldr	r2, [pc, #156]	; (8002bb0 <TIM_Base_SetConfig+0x12c>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d00f      	beq.n	8002b36 <TIM_Base_SetConfig+0xb2>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a26      	ldr	r2, [pc, #152]	; (8002bb4 <TIM_Base_SetConfig+0x130>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d00b      	beq.n	8002b36 <TIM_Base_SetConfig+0xb2>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a25      	ldr	r2, [pc, #148]	; (8002bb8 <TIM_Base_SetConfig+0x134>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d007      	beq.n	8002b36 <TIM_Base_SetConfig+0xb2>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a24      	ldr	r2, [pc, #144]	; (8002bbc <TIM_Base_SetConfig+0x138>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d003      	beq.n	8002b36 <TIM_Base_SetConfig+0xb2>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a23      	ldr	r2, [pc, #140]	; (8002bc0 <TIM_Base_SetConfig+0x13c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d108      	bne.n	8002b48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a0a      	ldr	r2, [pc, #40]	; (8002b98 <TIM_Base_SetConfig+0x114>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d003      	beq.n	8002b7c <TIM_Base_SetConfig+0xf8>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a0c      	ldr	r2, [pc, #48]	; (8002ba8 <TIM_Base_SetConfig+0x124>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d103      	bne.n	8002b84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	691a      	ldr	r2, [r3, #16]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	615a      	str	r2, [r3, #20]
}
 8002b8a:	bf00      	nop
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40010000 	.word	0x40010000
 8002b9c:	40000400 	.word	0x40000400
 8002ba0:	40000800 	.word	0x40000800
 8002ba4:	40000c00 	.word	0x40000c00
 8002ba8:	40010400 	.word	0x40010400
 8002bac:	40014000 	.word	0x40014000
 8002bb0:	40014400 	.word	0x40014400
 8002bb4:	40014800 	.word	0x40014800
 8002bb8:	40001800 	.word	0x40001800
 8002bbc:	40001c00 	.word	0x40001c00
 8002bc0:	40002000 	.word	0x40002000

08002bc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b087      	sub	sp, #28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	f023 0201 	bic.w	r2, r3, #1
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f023 030a 	bic.w	r3, r3, #10
 8002c00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	621a      	str	r2, [r3, #32]
}
 8002c16:	bf00      	nop
 8002c18:	371c      	adds	r7, #28
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b087      	sub	sp, #28
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	60f8      	str	r0, [r7, #12]
 8002c2a:	60b9      	str	r1, [r7, #8]
 8002c2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	f023 0210 	bic.w	r2, r3, #16
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	031b      	lsls	r3, r3, #12
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	621a      	str	r2, [r3, #32]
}
 8002c76:	bf00      	nop
 8002c78:	371c      	adds	r7, #28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b085      	sub	sp, #20
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f043 0307 	orr.w	r3, r3, #7
 8002ca4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	609a      	str	r2, [r3, #8]
}
 8002cac:	bf00      	nop
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b087      	sub	sp, #28
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
 8002cc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	021a      	lsls	r2, r3, #8
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	609a      	str	r2, [r3, #8]
}
 8002cec:	bf00      	nop
 8002cee:	371c      	adds	r7, #28
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e05a      	b.n	8002dc6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a21      	ldr	r2, [pc, #132]	; (8002dd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d022      	beq.n	8002d9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d5c:	d01d      	beq.n	8002d9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a1d      	ldr	r2, [pc, #116]	; (8002dd8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d018      	beq.n	8002d9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a1b      	ldr	r2, [pc, #108]	; (8002ddc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d013      	beq.n	8002d9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a1a      	ldr	r2, [pc, #104]	; (8002de0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d00e      	beq.n	8002d9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a18      	ldr	r2, [pc, #96]	; (8002de4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d009      	beq.n	8002d9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a17      	ldr	r2, [pc, #92]	; (8002de8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d004      	beq.n	8002d9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a15      	ldr	r2, [pc, #84]	; (8002dec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d10c      	bne.n	8002db4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002da0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40010000 	.word	0x40010000
 8002dd8:	40000400 	.word	0x40000400
 8002ddc:	40000800 	.word	0x40000800
 8002de0:	40000c00 	.word	0x40000c00
 8002de4:	40010400 	.word	0x40010400
 8002de8:	40014000 	.word	0x40014000
 8002dec:	40001800 	.word	0x40001800

08002df0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <__libc_init_array>:
 8002e18:	b570      	push	{r4, r5, r6, lr}
 8002e1a:	4e0d      	ldr	r6, [pc, #52]	; (8002e50 <__libc_init_array+0x38>)
 8002e1c:	4c0d      	ldr	r4, [pc, #52]	; (8002e54 <__libc_init_array+0x3c>)
 8002e1e:	1ba4      	subs	r4, r4, r6
 8002e20:	10a4      	asrs	r4, r4, #2
 8002e22:	2500      	movs	r5, #0
 8002e24:	42a5      	cmp	r5, r4
 8002e26:	d109      	bne.n	8002e3c <__libc_init_array+0x24>
 8002e28:	4e0b      	ldr	r6, [pc, #44]	; (8002e58 <__libc_init_array+0x40>)
 8002e2a:	4c0c      	ldr	r4, [pc, #48]	; (8002e5c <__libc_init_array+0x44>)
 8002e2c:	f000 f820 	bl	8002e70 <_init>
 8002e30:	1ba4      	subs	r4, r4, r6
 8002e32:	10a4      	asrs	r4, r4, #2
 8002e34:	2500      	movs	r5, #0
 8002e36:	42a5      	cmp	r5, r4
 8002e38:	d105      	bne.n	8002e46 <__libc_init_array+0x2e>
 8002e3a:	bd70      	pop	{r4, r5, r6, pc}
 8002e3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e40:	4798      	blx	r3
 8002e42:	3501      	adds	r5, #1
 8002e44:	e7ee      	b.n	8002e24 <__libc_init_array+0xc>
 8002e46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e4a:	4798      	blx	r3
 8002e4c:	3501      	adds	r5, #1
 8002e4e:	e7f2      	b.n	8002e36 <__libc_init_array+0x1e>
 8002e50:	08002ea0 	.word	0x08002ea0
 8002e54:	08002ea0 	.word	0x08002ea0
 8002e58:	08002ea0 	.word	0x08002ea0
 8002e5c:	08002ea4 	.word	0x08002ea4

08002e60 <memset>:
 8002e60:	4402      	add	r2, r0
 8002e62:	4603      	mov	r3, r0
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d100      	bne.n	8002e6a <memset+0xa>
 8002e68:	4770      	bx	lr
 8002e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e6e:	e7f9      	b.n	8002e64 <memset+0x4>

08002e70 <_init>:
 8002e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e72:	bf00      	nop
 8002e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e76:	bc08      	pop	{r3}
 8002e78:	469e      	mov	lr, r3
 8002e7a:	4770      	bx	lr

08002e7c <_fini>:
 8002e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e7e:	bf00      	nop
 8002e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e82:	bc08      	pop	{r3}
 8002e84:	469e      	mov	lr, r3
 8002e86:	4770      	bx	lr
